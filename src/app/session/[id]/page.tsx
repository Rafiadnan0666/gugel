'use client';
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { createClient } from '@/utils/supabase/client';
import Layout from '@/components/Layout';
import type { 
  IResearchSession, 
  ITab, 
  IDraft, 
  ISummary, 
  ISessionMessage, 
  ISessionCollaborator,
  IProfile
} from '@/types/main.db';
import {
  FiPlus, FiEdit2, FiTrash2, FiSave, FiDownload,
  FiExternalLink, FiZap, FiBook, FiClock,
  FiUser, FiMessageSquare, FiSend, FiX, FiCheck, 
  FiEdit3, FiAlertCircle, FiStar, FiUsers,
  FiWifi, FiWifiOff, FiActivity, FiGlobe, 
  FiRotateCw, FiTarget, FiFileText, FiBold,
  FiItalic, FiUnderline, FiList, FiAlignLeft,
  FiChevronLeft, FiSearch, FiFilter, FiShare2
} from 'react-icons/fi';

// Enhanced AI Service with multiple fallback options
const useAIService = () => {
  const [aiStatus, setAiStatus] = useState<'ready' | 'loading' | 'error'>('ready');
  const [aiProvider, setAiProvider] = useState<'mock' | 'openai' | 'anthropic'>('mock');

  // Enhanced AI functions with better responses
  const generateSummary = async (content: string, type: 'tab' | 'draft'): Promise<string> => {
    setAiStatus('loading');
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const summary = `
## üìã AI Research Summary

Based on the ${type} content analysis, here are the key findings:

### Main Themes:
- Research focuses on ${content.includes('AI') ? 'artificial intelligence' : 'key topics'}
- Important methodologies and approaches identified
- Significant findings highlighted

### Key Insights:
${content.split('.').slice(0, 3).map(point => `‚Ä¢ ${point.trim()}`).join('\n')}

### Recommendations:
- Further investigation recommended
- Additional sources suggested for deeper understanding

*Summary generated by AI Research Assistant*`;
      
      setAiStatus('ready');
      return summary;
    } catch (error) {
      setAiStatus('error');
      return `Unable to generate summary at this time. Please try again later. Error: ${error}`;
    }
  };

  const translateContent = async (content: string, targetLanguage: string): Promise<string> => {
    setAiStatus('loading');
    try {
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const translation = `
## üåç Translated Content (${targetLanguage})

**Original Text:**
"${content.substring(0, 100)}..."

**Translation:**
This is a simulated translation to ${targetLanguage}. The AI would provide accurate translation while preserving academic tone and technical terminology.

*Note: For production use, integrate with a proper translation API like Google Translate or DeepL*`;
      
      setAiStatus('ready');
      return translation;
    } catch (error) {
      setAiStatus('error');
      return `Translation service temporarily unavailable. Error: ${error}`;
    }
  };

  const rewriteContent = async (content: string, style: string = 'academic'): Promise<string> => {
    setAiStatus('loading');
    try {
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      const rewritten = `
## ‚úçÔ∏è Enhanced Version (${style} Style)

**Original:**
"${content.substring(0, 80)}..."

**Rewritten:**
This content has been enhanced with ${style} writing style improvements. The AI would optimize sentence structure, improve clarity, and ensure academic rigor while maintaining the original meaning and key information.

### Improvements Applied:
- Enhanced sentence structure and flow
- Improved academic tone and formality
- Better organization of ideas
- Increased readability and impact

*AI-enhanced writing with professional quality*`;
      
      setAiStatus('ready');
      return rewritten;
    } catch (error) {
      setAiStatus('error');
      return `Rewriting service temporarily unavailable. Error: ${error}`;
    }
  };

  const expandContent = async (content: string, context: string): Promise<string> => {
    setAiStatus('loading');
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const expanded = `
## üîç Expanded Analysis

**Original Content:**
"${content.substring(0, 60)}..."

**Expanded Version with ${context}:**
This section has been expanded with additional analysis, supporting evidence, and contextual information. The AI would provide deeper insights, related concepts, and comprehensive explanations to enhance understanding.

### Additional Insights:
- Detailed background information
- Supporting evidence and examples
- Related research connections
- Practical implications and applications

*AI-powered content expansion with thorough analysis*`;
      
      setAiStatus('ready');
      return expanded;
    } catch (error) {
      setAiStatus('error');
      return `Expansion service temporarily unavailable. Error: ${error}`;
    }
  };

  const autoGenerateDraft = async (tabs: ITab[], theme: string): Promise<string> => {
    setAiStatus('loading');
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const tabTitles = tabs.map(tab => tab.title || 'Research Source').join(', ');
      const draft = `
# Research Draft: ${theme}

## Abstract
This draft synthesizes insights from ${tabs.length} research sources including: ${tabTitles}. The AI has analyzed the available content to create a coherent research structure.

## Introduction
Research on ${theme} encompasses various approaches and methodologies. This draft integrates findings from multiple sources to provide comprehensive coverage.

## Literature Review
Based on the analyzed sources, key themes emerge in the field. The research tabs provide foundational knowledge and empirical evidence supporting this study.

## Methodology
The integrated approach combines insights from diverse sources, ensuring a robust analytical framework.

## Key Findings
- Significant patterns identified across research sources
- Important correlations and relationships
- Novel insights and discoveries

## Conclusion
This AI-generated draft serves as a starting point for further refinement and development.

*Generated by AI Research Assistant based on ${tabs.length} sources*`;
      
      setAiStatus('ready');
      return draft;
    } catch (error) {
      setAiStatus('error');
      return `Draft generation service temporarily unavailable. Error: ${error}`;
    }
  };

  const chatWithAI = async (message: string, context: { tabs: ITab[], drafts: IDraft[], session: IResearchSession }): Promise<string> => {
    setAiStatus('loading');
    try {
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const response = `
## ü§ñ AI Research Assistant

**Your Question:** "${message}"

**Analysis Context:**
- Research Session: "${context.session.title}"
- Available Sources: ${context.tabs.length} research tabs
- Draft Versions: ${context.drafts.length} saved drafts

**Response:**
I've analyzed your query in the context of your research project. Based on the available content, here are my insights:

### Understanding Your Request
Your question about "${message.substring(0, 30)}..." aligns well with the research theme. I can help you:

1. **Analyze existing content** from your ${context.tabs.length} sources
2. **Structure your research** based on academic standards
3. **Identify gaps** and suggest additional research directions
4. **Improve writing quality** and academic tone

### Suggested Next Steps:
- Review the key findings from your research tabs
- Consider integrating insights from multiple sources
- Structure your draft with clear sections and logical flow

*I'm here to help with any aspect of your research process!*`;
      
      setAiStatus('ready');
      return response;
    } catch (error) {
      setAiStatus('error');
      return `I apologize, but I'm experiencing temporary technical difficulties. Please try again in a moment. Error: ${error}`;
    }
  };

  return {
    aiStatus,
    aiProvider,
    generateSummary,
    translateContent,
    rewriteContent,
    expandContent,
    autoGenerateDraft,
    chatWithAI,
    setAiProvider
  };
};

// Enhanced Collaboration Hook
const useCollaboration = (sessionId: string, userId: string) => {
  const [onlineUsers, setOnlineUsers] = useState<any[]>([]);
  const [isCollaborativeEditing, setIsCollaborativeEditing] = useState(false);
  const [collaborationEvents, setCollaborationEvents] = useState<any[]>([]);
  const supabase = createClient();

  useEffect(() => {
    if (!sessionId || !userId) return;

    const channel = supabase.channel(`session:${sessionId}`)
      .on('presence', { event: 'sync' }, () => {
        const state = channel.presenceState();
        const users = Object.values(state).flat() as any[];
        setOnlineUsers(users.filter(user => user.user_id !== userId));
      })
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'tabs', filter: `session_id=eq.${sessionId}` },
        (payload) => {
          setCollaborationEvents(prev => [...prev.slice(-9), {
            type: 'tab_update',
            payload,
            timestamp: new Date(),
            user: payload.new?.user_id || 'system'
          }]);
        }
      )
      .subscribe(async (status) => {
        if (status === 'SUBSCRIBED') {
          await channel.track({
            user_id: userId,
            online_at: new Date().toISOString(),
            last_active: new Date().toISOString()
          });
        }
      });

    return () => {
      channel.unsubscribe();
    };
  }, [sessionId, userId, supabase]);

  const sendCollaborationMessage = async (message: string) => {
    try {
      const channel = supabase.channel(`session:${sessionId}`);
      await channel.send({
        type: 'broadcast',
        event: 'collaboration_message',
        payload: { message, user_id: userId, timestamp: new Date().toISOString() }
      });
    } catch (error) {
      console.error('Error sending collaboration message:', error);
    }
  };

  return {
    onlineUsers,
    isCollaborativeEditing,
    setIsCollaborativeEditing,
    collaborationEvents,
    sendCollaborationMessage
  };
};

// Enhanced Editor Component
const AdvancedEditor: React.FC<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  disabled?: boolean;
  onlineUsers?: any[];
  onAIAction?: (action: string, content: string, options?: any) => Promise<string>;
}> = ({ value, onChange, placeholder = "Start writing your research findings...", disabled = false, onlineUsers = [], onAIAction }) => {
  const editorRef = useRef<HTMLDivElement>(null);
  const [isAILoading, setIsAILoading] = useState(false);
  const [showAITools, setShowAITools] = useState(false);
  
  const formatText = (command: string, value?: string) => {
    document.execCommand(command, false, value);
    updateContent();
  };

  const updateContent = () => {
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML);
    }
  };

  const handleAIAction = async (action: string, options?: any) => {
    if (!onAIAction || !editorRef.current) return;
    
    const selection = window.getSelection();
    const selectedText = selection?.toString().trim() || editorRef.current.innerText.trim();
    
    if (!selectedText) return;
    
    setIsAILoading(true);
    try {
      const result = await onAIAction(action, selectedText, options);
      
      if (selection && selection.rangeCount > 0 && selection.toString().trim()) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        
        const div = document.createElement('div');
        div.innerHTML = result;
        const fragment = document.createDocumentFragment();
        while (div.firstChild) {
          fragment.appendChild(div.firstChild);
        }
        range.insertNode(fragment);
      } else {
        const p = document.createElement('p');
        p.innerHTML = result;
        editorRef.current.appendChild(p);
      }
      
      updateContent();
    } catch (error) {
      console.error('AI Action failed:', error);
    } finally {
      setIsAILoading(false);
    }
  };

  const AI_TOOLS = [
    { id: 'summarize', label: 'Summarize', icon: FiFileText, description: 'Create concise summary' },
    { id: 'translate', label: 'Translate', icon: FiGlobe, description: 'Translate content' },
    { id: 'rewrite', label: 'Rewrite', icon: FiRotateCw, description: 'Improve writing style' },
    { id: 'expand', label: 'Expand', icon: FiTarget, description: 'Add more details' }
  ];

  return (
    <div className="border border-gray-300 rounded-lg overflow-hidden relative bg-white shadow-sm">
      {/* AI Tools Panel */}
      {showAITools && (
        <div className="absolute top-12 right-4 z-20 bg-white border border-gray-200 rounded-lg shadow-xl w-64">
          <div className="p-3 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-purple-50">
            <h4 className="font-semibold text-gray-900 text-sm">AI Writing Assistant</h4>
          </div>
          <div className="p-2">
            {AI_TOOLS.map(tool => (
              <button
                key={tool.id}
                onClick={() => handleAIAction(tool.id)}
                disabled={isAILoading}
                className="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors text-left mb-1 last:mb-0"
              >
                <tool.icon className="w-4 h-4 text-blue-600 flex-shrink-0" />
                <div className="flex-1 min-w-0">
                  <div className="font-medium text-gray-900 text-sm truncate">{tool.label}</div>
                  <div className="text-xs text-gray-600 truncate">{tool.description}</div>
                </div>
                {isAILoading && (
                  <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600"></div>
                )}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Editor Toolbar */}
      <div className="flex flex-wrap items-center gap-1 p-3 border-b border-gray-200 bg-gray-50">
        <button 
          onClick={() => setShowAITools(!showAITools)}
          disabled={isAILoading}
          className="p-2 rounded-lg hover:bg-gray-200 transition-colors border border-transparent hover:border-gray-300"
          title="AI Assistant"
        >
          <FiZap className="w-4 h-4 text-purple-600" />
        </button>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        
        <div className="flex items-center gap-1">
          <button onClick={() => formatText('bold')} className="p-2 rounded hover:bg-gray-200" title="Bold">
            <FiBold className="w-4 h-4" />
          </button>
          <button onClick={() => formatText('italic')} className="p-2 rounded hover:bg-gray-200" title="Italic">
            <FiItalic className="w-4 h-4" />
          </button>
          <button onClick={() => formatText('underline')} className="p-2 rounded hover:bg-gray-200" title="Underline">
            <FiUnderline className="w-4 h-4" />
          </button>
        </div>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        
        <div className="flex items-center gap-1">
          <button onClick={() => formatText('insertUnorderedList')} className="p-2 rounded hover:bg-gray-200" title="Bullet List">
            <FiList className="w-4 h-4" />
          </button>
          <button onClick={() => formatText('insertOrderedList')} className="p-2 rounded hover:bg-gray-200" title="Numbered List">
            <FiList className="w-4 h-4" />
          </button>
        </div>
      </div>
      
      {/* Editor Content */}
      <div
        ref={editorRef}
        contentEditable={!disabled}
        onInput={updateContent}
        className="min-h-96 p-6 focus:outline-none prose prose-sm max-w-none bg-white leading-relaxed"
        dangerouslySetInnerHTML={{ 
          __html: value || `<p class="text-gray-400 italic">${placeholder}</p>` 
        }}
      />

      {/* Status Bar */}
      <div className="flex justify-between items-center px-4 py-2 bg-gray-50 border-t border-gray-200 text-xs text-gray-600">
        <div className="flex items-center space-x-4">
          {onlineUsers.length > 0 && (
            <div className="flex items-center space-x-2">
              <div className="flex -space-x-2">
                {onlineUsers.slice(0, 3).map((user, index) => (
                  <div 
                    key={index} 
                    className="w-5 h-5 bg-blue-500 rounded-full border-2 border-white flex items-center justify-center text-white text-xs font-medium"
                    title={user.user_id || 'Collaborator'}
                  >
                    {user.user_id?.charAt(0)?.toUpperCase() || 'C'}
                  </div>
                ))}
              </div>
              <span>{onlineUsers.length} online</span>
            </div>
          )}
        </div>
        
        <div className="flex items-center space-x-2">
          {isAILoading && (
            <div className="flex items-center space-x-1 text-blue-600">
              <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600"></div>
              <span>AI Processing...</span>
            </div>
          )}
        </div>
      </div>

      {/* AI Loading Overlay */}
      {isAILoading && (
        <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center z-10 rounded-lg">
          <div className="flex items-center space-x-3 text-blue-600 bg-white px-4 py-3 rounded-lg shadow-lg border border-blue-200">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
            <div>
              <div className="font-medium text-sm">AI is processing your request</div>
              <div className="text-xs text-blue-500">This may take a few seconds...</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Modal Component
const Modal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div 
        className={`bg-white rounded-xl shadow-2xl ${sizeClasses[size]} w-full max-h-[90vh] overflow-y-auto`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="p-6 border-b border-gray-200 flex justify-between items-center bg-gradient-to-r from-gray-50 to-white rounded-t-xl">
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          <button 
            onClick={onClose} 
            className="text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-lg hover:bg-gray-100"
          >
            <FiX className="w-5 h-5" />
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

// Tab Modal Component
const TabModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSave: (tab: Partial<ITab>) => void;
  editingTab?: ITab | null;
  onAIAction?: (action: string, content: string) => Promise<string>;
}> = ({ isOpen, onClose, onSave, editingTab, onAIAction }) => {
  const [url, setUrl] = useState(editingTab?.url || '');
  const [title, setTitle] = useState(editingTab?.title || '');
  const [content, setContent] = useState(editingTab?.content || '');
  const [isGeneratingTitle, setIsGeneratingTitle] = useState(false);

  useEffect(() => {
    if (editingTab) {
      setUrl(editingTab.url);
      setTitle(editingTab.title || '');
      setContent(editingTab.content || '');
    } else {
      setUrl('');
      setTitle('');
      setContent('');
    }
  }, [editingTab, isOpen]);

  const generateTitleFromContent = async () => {
    if (!content.trim() || !onAIAction) return;
    
    setIsGeneratingTitle(true);
    try {
      const generatedTitle = await onAIAction('generate_title', content);
      setTitle(generatedTitle.replace(/^#+\s*/, '').trim());
    } catch (error) {
      console.error('Failed to generate title:', error);
    } finally {
      setIsGeneratingTitle(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!url.trim()) return;

    onSave({
      id: editingTab?.id,
      url: url.trim(),
      title: title.trim() || 'New Research Tab',
      content: content.trim()
    });
    onClose();
  };

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose} 
      title={editingTab ? 'Edit Research Tab' : 'Add Research Tab'} 
      size="lg"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Research URL *
          </label>
          <input
            type="url"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="https://arxiv.org/abs/1234.5678"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Title
            {content.trim() && onAIAction && (
              <button
                type="button"
                onClick={generateTitleFromContent}
                disabled={isGeneratingTitle}
                className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200 transition-colors"
              >
                {isGeneratingTitle ? 'Generating...' : '‚ú® AI Suggest Title'}
              </button>
            )}
          </label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Research paper title or description"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Research Notes & Key Findings
          </label>
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Add your research notes, key findings, summary, or important quotes..."
            rows={6}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors resize-vertical"
          />
        </div>

        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium flex items-center space-x-2"
          >
            <FiSave className="w-4 h-4" />
            <span>{editingTab ? 'Update Tab' : 'Add Research Tab'}</span>
          </button>
        </div>
      </form>
    </Modal>
  );
};

// AI Chat Component
const AIChat: React.FC<{
  messages: ISessionMessage[];
  onSendMessage: (content: string) => void;
  isLoading: boolean;
  aiStatus: string;
}> = ({ messages, onSendMessage, isLoading, aiStatus }) => {
  const [input, setInput] = useState('');
  const chatEndRef = useRef<HTMLDivElement>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() && !isLoading) {
      onSendMessage(input);
      setInput('');
    }
  };

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const quickPrompts = [
    "Summarize my research findings",
    "Help me structure the research paper",
    "Improve academic tone of my draft",
    "Suggest research questions"
  ];

  return (
    <div className="flex flex-col h-full bg-gradient-to-br from-gray-50 to-blue-50 rounded-lg border border-gray-200 overflow-hidden">
      {/* Chat Header */}
      <div className="p-4 border-b border-gray-200 bg-white">
        <div className="flex items-center space-x-3">
          <div className={`w-3 h-3 rounded-full ${
            aiStatus === 'ready' ? 'bg-green-500' : 
            aiStatus === 'loading' ? 'bg-yellow-500' : 'bg-red-500'
          } animate-pulse`}></div>
          <div>
            <h3 className="font-semibold text-gray-900">AI Research Assistant</h3>
            <p className="text-sm text-gray-600">
              {aiStatus === 'ready' ? 'Ready to help' : 
               aiStatus === 'loading' ? 'Processing...' : 'Temporarily unavailable'}
            </p>
          </div>
        </div>
      </div>

      {/* Quick Prompts */}
      {messages.length === 0 && (
        <div className="p-4 bg-blue-50 border-b border-blue-100">
          <p className="text-sm text-blue-800 mb-3 font-medium">Try asking:</p>
          <div className="grid grid-cols-2 gap-2">
            {quickPrompts.map((prompt, index) => (
              <button
                key={index}
                onClick={() => setInput(prompt)}
                className="text-left text-xs bg-blue-100 text-blue-700 px-3 py-2 rounded-lg hover:bg-blue-200 transition-colors"
              >
                {prompt}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Messages Container */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs lg:max-w-2xl rounded-2xl p-4 ${
              message.sender === 'user' 
                ? 'bg-blue-600 text-white rounded-br-none' 
                : 'bg-white text-gray-900 rounded-bl-none border border-gray-100 shadow-sm'
            }`}>
              <div className="flex items-center space-x-2 mb-2">
                {message.sender === 'ai' && (
                  <div className="w-6 h-6 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
                    <FiZap className="w-3 h-3 text-white" />
                  </div>
                )}
                <span className="text-sm font-medium">
                  {message.sender === 'user' ? 'You' : 'Research Assistant'}
                </span>
              </div>
              <div className="prose prose-sm max-w-none">
                <div dangerouslySetInnerHTML={{ 
                  __html: message.content.replace(/\n/g, '<br>') 
                }} />
              </div>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-white text-gray-900 rounded-2xl rounded-bl-none p-4 border border-gray-100 shadow-sm max-w-md">
              <div className="flex items-center space-x-3">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
                <span className="text-sm text-gray-600">AI is thinking...</span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={chatEndRef} />
      </div>

      {/* Input Area */}
      <form onSubmit={handleSubmit} className="p-4 border-t border-gray-200 bg-white">
        <div className="flex space-x-3">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask AI about your research..."
            className="flex-1 border border-gray-300 rounded-lg px-4 py-3 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
            disabled={isLoading}
          />
          <button 
            type="submit"
            disabled={isLoading || !input.trim()}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors flex items-center space-x-2"
          >
            <FiSend className="w-4 h-4" />
            <span className="hidden sm:inline">Send</span>
          </button>
        </div>
      </form>
    </div>
  );
};

// Invite Collaborator Form
const InviteCollaboratorForm: React.FC<{
  sessionId: string;
  onInviteSent: () => void;
  currentCollaborators: ISessionCollaborator[];
}> = ({ sessionId, onInviteSent, currentCollaborators }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'editor' | 'viewer'>('viewer');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClient();

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Validate email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new Error('Please enter a valid email address');
      }

      // Find user by email
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('id, email, full_name')
        .eq('email', email)
        .single();

      if (userError || !userData) {
        throw new Error('User not found. Please check the email address.');
      }

      // Check if already a collaborator
      const isAlreadyCollaborator = currentCollaborators.some(collab => collab.user_id === userData.id);
      if (isAlreadyCollaborator) {
        throw new Error('This user is already a collaborator');
      }

      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Authentication required');

      // Add collaborator
      const { error: insertError } = await supabase
        .from('session_collaborators')
        .insert({
          session_id: sessionId,
          user_id: userData.id,
          role: role,
          invited_at: new Date().toISOString(),
          invited_by: user.id
        });

      if (insertError) throw insertError;

      onInviteSent();
      setEmail('');
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleInvite} className="space-y-6">
      {error && (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-800 text-sm">
          <div className="flex items-center space-x-2">
            <FiAlertCircle className="w-4 h-4" />
            <span>{error}</span>
          </div>
        </div>
      )}
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Email Address *
        </label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="collaborator@university.edu"
          className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">Role *</label>
        <div className="space-y-3">
          <label className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
            <input
              type="radio"
              value="editor"
              checked={role === 'editor'}
              onChange={(e) => setRole(e.target.value as 'editor' | 'viewer')}
              className="text-blue-600 focus:ring-blue-500"
            />
            <div>
              <span className="font-medium text-gray-900">Editor</span>
              <p className="text-sm text-gray-600">Can edit content and manage research tabs</p>
            </div>
          </label>
          <label className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
            <input
              type="radio"
              value="viewer"
              checked={role === 'viewer'}
              onChange={(e) => setRole(e.target.value as 'editor' | 'viewer')}
              className="text-blue-600 focus:ring-blue-500"
            />
            <div>
              <span className="font-medium text-gray-900">Viewer</span>
              <p className="text-sm text-gray-600">Can view content but cannot make changes</p>
            </div>
          </label>
        </div>
      </div>

      <button
        type="submit"
        disabled={isLoading}
        className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors font-medium"
      >
        {isLoading ? 'Sending Invitation...' : 'Send Collaboration Invite'}
      </button>
    </form>
  );
};

// Main Session Page Component
export default function SessionPage() {
  const params = useParams();
  const router = useRouter();
  const sessionId = params.id as string;
  const supabase = createClient();
  
  // State declarations
  const [session, setSession] = useState<IResearchSession | null>(null);
  const [tabs, setTabs] = useState<ITab[]>([]);
  const [drafts, setDrafts] = useState<IDraft[]>([]);
  const [summaries, setSummaries] = useState<ISummary[]>([]);
  const [currentDraft, setCurrentDraft] = useState('');
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'drafts' | 'chat' | 'collaborate'>('content');
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [chatMessages, setChatMessages] = useState<ISessionMessage[]>([]);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [modal, setModal] = useState<{ type: string; data?: any }>({ type: '' });
  const [userProfile, setUserProfile] = useState<IProfile | null>(null);
  const [sessionPermissions, setSessionPermissions] = useState<'owner' | 'editor' | 'viewer'>('viewer');
  const [showTabModal, setShowTabModal] = useState(false);
  const [editingTab, setEditingTab] = useState<ITab | null>(null);
  const [collaborators, setCollaborators] = useState<ISessionCollaborator[]>([]);

  // Hooks
  const { onlineUsers, isCollaborativeEditing, setIsCollaborativeEditing, collaborationEvents } = useCollaboration(sessionId, userProfile?.id || '');
  const aiService = useAIService();

  // Load session data
  const loadSessionData = async () => {
    try {
      setLoading(true);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        router.push('/sign-in');
        return;
      }

      // Load user profile
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      setUserProfile(profile);

      // Load session
      const { data: sessionData, error: sessionError } = await supabase
        .from('research_sessions')
        .select('*')
        .eq('id', sessionId)
        .single();

      if (sessionError || !sessionData) {
        console.error('Session not found:', sessionError);
        setModal({ type: 'error', data: { message: 'Research session not found' } });
        return;
      }

      setSession(sessionData);
      setEditedTitle(sessionData.title);

      // Check permissions
      if (sessionData.user_id === user.id) {
        setSessionPermissions('owner');
      } else {
        const { data: collaborator } = await supabase
          .from('session_collaborators')
          .select('role')
          .eq('session_id', sessionId)
          .eq('user_id', user.id)
          .single();
        
        setSessionPermissions(collaborator?.role || 'viewer');
      }

      // Load related data
      const [
        tabsResponse, 
        draftsResponse, 
        collaboratorsResponse, 
        messagesResponse
      ] = await Promise.all([
        supabase.from('tabs').select('*').eq('session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('drafts').select('*').eq('research_session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('session_collaborators').select('*, profiles:user_id(full_name, email)').eq('session_id', sessionId),
        supabase.from('session_messages').select('*').eq('session_id', sessionId).order('created_at', { ascending: true })
      ]);

      if (tabsResponse.data) setTabs(tabsResponse.data);
      if (draftsResponse.data) {
        setDrafts(draftsResponse.data);
        if (draftsResponse.data.length > 0) {
          setCurrentDraft(draftsResponse.data[0].content);
        }
      }
      if (collaboratorsResponse.data) setCollaborators(collaboratorsResponse.data);
      if (messagesResponse.data) setChatMessages(messagesResponse.data);

    } catch (error) {
      console.error('Error loading session:', error);
      setModal({ type: 'error', data: { message: 'Failed to load session data' } });
    } finally {
      setLoading(false);
    }
  };

  // CRUD Operations
  const createTab = async (tabData: Partial<ITab>) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Authentication required');

      const { data, error } = await supabase
        .from('tabs')
        .insert([{
          session_id: sessionId,
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
          user_id: user.id
        }])
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => [data, ...prev]);
      
      // Auto-generate summary
      if (tabData.content && tabData.content.length > 50) {
        try {
          const summary = await aiService.generateSummary(tabData.content, 'tab');
          await supabase
            .from('summaries')
            .insert([{
              tab_id: data.id,
              summary: summary,
              created_at: new Date().toISOString()
            }]);
        } catch (summaryError) {
          console.error('Auto-summary generation failed:', summaryError);
        }
      }
      
      setModal({ type: 'success', data: { message: 'Research tab added successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const updateTab = async (tabData: Partial<ITab>) => {
    try {
      const { data, error } = await supabase
        .from('tabs')
        .update({
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
        })
        .eq('id', tabData.id)
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => prev.map(tab => tab.id === tabData.id ? data : tab));
      setModal({ type: 'success', data: { message: 'Research tab updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const deleteTab = async (tabId: string) => {
    if (!confirm('Are you sure you want to delete this research tab?')) return;
    
    try {
      const { error } = await supabase
        .from('tabs')
        .delete()
        .eq('id', tabId);

      if (error) throw error;
      
      setTabs(prev => prev.filter(tab => tab.id !== tabId));
      setModal({ type: 'success', data: { message: 'Research tab deleted successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const saveDraft = async () => {
    if (!sessionId || !currentDraft.trim()) {
      setModal({ type: 'error', data: { message: 'Cannot save empty draft' } });
      return;
    }

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Authentication required');

      const { data, error } = await supabase
        .from('drafts')
        .insert([{
          research_session_id: sessionId,
          content: currentDraft,
          version: drafts.length + 1,
          user_id: user.id
        }])
        .select()
        .single();

      if (error) throw error;
      
      setDrafts(prev => [data, ...prev]);
      setModal({ type: 'success', data: { message: 'Draft saved successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const generateAIDraft = async () => {
    if (tabs.length === 0) {
      setModal({ type: 'error', data: { message: 'No research tabs available' } });
      return;
    }

    setIsChatLoading(true);
    try {
      const aiDraft = await aiService.autoGenerateDraft(tabs, session?.title || 'Research Project');
      setCurrentDraft(aiDraft);
      setModal({ type: 'success', data: { message: 'AI draft generated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: 'Failed to generate AI draft' } });
    } finally {
      setIsChatLoading(false);
    }
  };

  const updateSessionTitle = async () => {
    if (!sessionId || !editedTitle.trim()) return;

    try {
      const { data, error } = await supabase
        .from('research_sessions')
        .update({ title: editedTitle })
        .eq('id', sessionId)
        .select()
        .single();

      if (error) throw error;
      
      setSession(data);
      setIsEditingTitle(false);
      setModal({ type: 'success', data: { message: 'Title updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const sendChatMessage = async (content: string) => {
    if (!session) return;

    const userMessage: ISessionMessage = {
      id: `msg_${Date.now()}`,
      session_id: sessionId,
      user_id: userProfile?.id,
      content,
      sender: 'user',
      created_at: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setIsChatLoading(true);

    try {
      const aiResponse = await aiService.chatWithAI(content, { 
        tabs, 
        drafts, 
        session 
      });
      
      const aiMessage: ISessionMessage = {
        id: `msg_${Date.now() + 1}`,
        session_id: sessionId,
        content: aiResponse,
        sender: 'ai',
        created_at: new Date()
      };

      setChatMessages(prev => [...prev, aiMessage]);

      // Save messages to database
      await supabase
        .from('session_messages')
        .insert([userMessage, aiMessage]);

    } catch (error) {
      console.error('Error getting AI response:', error);
      const errorMessage: ISessionMessage = {
        id: `msg_${Date.now() + 1}`,
        session_id: sessionId,
        content: 'I apologize, but I encountered an error. Please try again.',
        sender: 'ai',
        created_at: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsChatLoading(false);
    }
  };

  const handleAIAction = async (action: string, content: string, options?: any) => {
    try {
      switch (action) {
        case 'summarize':
          return await aiService.generateSummary(content, 'draft');
        case 'translate':
          const targetLang = options?.style || 'Spanish';
          return await aiService.translateContent(content, targetLang);
        case 'rewrite':
          const style = options?.style || 'academic';
          return await aiService.rewriteContent(content, style);
        case 'expand':
          const context = options?.style || 'detailed analysis';
          return await aiService.expandContent(content, context);
        case 'generate_title':
          return `AI Suggested Title: ${content.substring(0, 60)}...`;
        default:
          return content;
      }
    } catch (error) {
      console.error('AI Action failed:', error);
      return `AI service temporarily unavailable. Please try again.`;
    }
  };

  // Initial load
  useEffect(() => {
    if (sessionId) {
      loadSessionData();
    }
  }, [sessionId]);

  if (loading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
          <div className="text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Loading Research Session</h2>
            <p className="text-gray-600">Preparing your research environment...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!session) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
          <div className="text-center max-w-md mx-auto p-8">
            <FiAlertCircle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Research Session Not Found</h1>
            <p className="text-gray-600 mb-6">
              The research session you're looking for doesn't exist or you don't have permission to access it.
            </p>
            <button 
              onClick={() => router.push('/dashboard')} 
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Back to Dashboard
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="mb-8">
            <button 
              onClick={() => router.push('/dashboard')} 
              className="inline-flex items-center text-gray-600 hover:text-black mb-6 transition-colors group"
            >
              <FiChevronLeft className="w-5 h-5 mr-2 group-hover:-translate-x-1 transition-transform" />
              Back to Dashboard
            </button>
            
            <div className="flex items-center gap-3 mb-3">
              {isEditingTitle ? (
                <div className="flex items-center gap-3 bg-white p-3 rounded-lg border border-blue-300 shadow-sm">
                  <input
                    type="text"
                    value={editedTitle}
                    onChange={(e) => setEditedTitle(e.target.value)}
                    className="text-3xl font-bold text-gray-900 bg-transparent border-b-2 border-blue-500 focus:outline-none flex-1 min-w-0"
                    autoFocus
                    onKeyPress={(e) => e.key === 'Enter' && updateSessionTitle()}
                    onBlur={updateSessionTitle}
                  />
                  <div className="flex gap-1">
                    <button 
                      onClick={updateSessionTitle} 
                      className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                    >
                      <FiCheck className="w-5 h-5" />
                    </button>
                    <button 
                      onClick={() => setIsEditingTitle(false)} 
                      className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                    >
                      <FiX className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center gap-3 group">
                  <h1 className="text-3xl font-bold text-gray-900 break-words">{session.title}</h1>
                  {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                    <button 
                      onClick={() => setIsEditingTitle(true)} 
                      className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg opacity-0 group-hover:opacity-100 transition-all"
                    >
                      <FiEdit3 className="w-5 h-5" />
                    </button>
                  )}
                </div>
              )}
            </div>
            
            <div className="flex items-center gap-4 text-gray-600 flex-wrap">
              <span className="flex items-center gap-2 bg-white px-3 py-1 rounded-full text-sm shadow-sm">
                <FiClock className="w-4 h-4" />
                Created {new Date(session.created_at).toLocaleDateString()}
              </span>
              <span className="flex items-center gap-2 bg-white px-3 py-1 rounded-full text-sm shadow-sm">
                <FiBook className="w-4 h-4" />
                {tabs.length} research {tabs.length === 1 ? 'source' : 'sources'}
              </span>
              <span className="flex items-center gap-2 bg-white px-3 py-1 rounded-full text-sm shadow-sm">
                <FiEdit2 className="w-4 h-4" />
                {drafts.length} draft {drafts.length === 1 ? 'version' : 'versions'}
              </span>
              <span className="flex items-center gap-2 bg-white px-3 py-1 rounded-full text-sm shadow-sm">
                <FiUsers className="w-4 h-4" />
                {collaborators.length + 1} collaborator{collaborators.length + 1 === 1 ? '' : 's'}
              </span>
              {onlineUsers.length > 0 && (
                <span className="flex items-center gap-2 bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm shadow-sm">
                  <FiWifi className="w-4 h-4" />
                  {onlineUsers.length} online now
                </span>
              )}
            </div>
          </div>

          {/* Navigation Tabs */}
          <div className="flex border-b border-gray-200 mb-8 overflow-x-auto bg-white rounded-lg shadow-sm">
            {[
              { id: 'content', label: 'Research Content', icon: FiBook, count: tabs.length },
              { id: 'drafts', label: 'Drafts', icon: FiEdit2, count: drafts.length },
              { id: 'chat', label: 'AI Assistant', icon: FiMessageSquare },
              { id: 'collaborate', label: 'Collaborate', icon: FiUsers, count: collaborators.length + 1 }
            ].map(({ id, label, icon: Icon, count }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id as any)}
                className={`flex items-center space-x-2 px-6 py-4 border-b-2 font-medium whitespace-nowrap transition-all flex-1 justify-center min-w-0 ${
                  activeTab === id
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                }`}
              >
                <Icon className="w-4 h-4 flex-shrink-0" />
                <span className="truncate">{label}</span>
                {count !== undefined && (
                  <span className={`px-2 py-1 rounded-full text-xs min-w-[2rem] text-center ${
                    activeTab === id ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600'
                  }`}>
                    {count}
                  </span>
                )}
              </button>
            ))}
          </div>

          {/* Content Tab */}
          {activeTab === 'content' && (
            <div className="space-y-6">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">Research Sources</h2>
                  <p className="text-gray-600 text-sm">Manage your research references and sources</p>
                </div>
                <div className="flex flex-wrap gap-3">
                  {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                    <>
                      <button 
                        onClick={generateAIDraft}
                        disabled={tabs.length === 0 || isChatLoading}
                        className="bg-gradient-to-br from-purple-600 to-purple-700 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-purple-800 disabled:from-gray-400 disabled:to-gray-500 transition-all flex items-center space-x-2 shadow-sm"
                      >
                        <FiZap className="w-4 h-4" />
                        <span>Generate AI Draft</span>
                      </button>
                      <button 
                        onClick={() => {
                          setEditingTab(null);
                          setShowTabModal(true);
                        }}
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all flex items-center space-x-2 shadow-sm"
                      >
                        <FiPlus className="w-4 h-4" />
                        <span>Add Research Source</span>
                      </button>
                    </>
                  )}
                </div>
              </div>

              {tabs.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {tabs.map((tab) => (
                    <div key={tab.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all bg-white group">
                      <div className="flex justify-between items-start mb-3">
                        <h3 className="font-semibold text-gray-900 truncate" title={tab.title || 'Untitled'}>
                          {tab.title || 'Untitled Research Source'}
                        </h3>
                        <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                          <a 
                            href={tab.url} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                          >
                            <FiExternalLink className="w-4 h-4" />
                          </a>
                          {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                            <>
                              <button 
                                onClick={() => {
                                  setEditingTab(tab);
                                  setShowTabModal(true);
                                }}
                                className="p-1 text-gray-400 hover:text-green-600 transition-colors"
                              >
                                <FiEdit2 className="w-4 h-4" />
                              </button>
                              <button 
                                onClick={() => deleteTab(tab.id)} 
                                className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                              >
                                <FiTrash2 className="w-4 h-4" />
                              </button>
                            </>
                          )}
                        </div>
                      </div>
                      
                      <p className="text-sm text-gray-600 truncate mb-2" title={tab.url}>{tab.url}</p>
                      
                      {tab.content && (
                        <p className="text-sm text-gray-700 line-clamp-3 mb-3">{tab.content}</p>
                      )}
                      
                      <div className="flex justify-between items-center text-xs text-gray-500 pt-2 border-t border-gray-100">
                        <span>Added {new Date(tab.created_at).toLocaleDateString()}</span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-16 bg-white rounded-lg border-2 border-dashed border-gray-300">
                  <FiBook className="w-20 h-20 mx-auto mb-4 text-gray-300" />
                  <h3 className="text-xl font-medium text-gray-900 mb-2">No research sources yet</h3>
                  <p className="text-gray-600 mb-6 max-w-md mx-auto">
                    Start by adding research papers, articles, or online resources to build your research foundation.
                  </p>
                  {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                    <button 
                      onClick={() => setShowTabModal(true)}
                      className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-all shadow-sm"
                    >
                      Add Your First Research Source
                    </button>
                  )}
                </div>
              )}
            </div>
          )}

          {/* Drafts Tab */}
          {activeTab === 'drafts' && (
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
              <div className="space-y-4">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">Research Draft</h2>
                    <p className="text-gray-600 text-sm">Write and refine your research content</p>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    <button 
                      onClick={saveDraft}
                      disabled={sessionPermissions === 'viewer' || !currentDraft.trim()}
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-all flex items-center space-x-2 shadow-sm"
                    >
                      <FiSave className="w-4 h-4" />
                      <span>Save Draft</span>
                    </button>
                  </div>
                </div>
                
                <AdvancedEditor
                  value={currentDraft}
                  onChange={setCurrentDraft}
                  placeholder="Start writing your research findings. Use the AI tools (‚ö°) to enhance your writing..."
                  disabled={sessionPermissions === 'viewer'}
                  onlineUsers={onlineUsers}
                  onAIAction={handleAIAction}
                />
              </div>

              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">Draft Versions</h3>
                    <p className="text-gray-600 text-sm">Previous versions and auto-saves</p>
                  </div>
                  <span className="text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded">
                    {drafts.length} version{drafts.length === 1 ? '' : 's'}
                  </span>
                </div>
                <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                  {drafts.map((draft, index) => (
                    <div 
                      key={draft.id} 
                      className={`border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-all group ${
                        currentDraft === draft.content ? 'border-blue-500 bg-blue-50 shadow-sm' : 'border-gray-200'
                      }`}
                      onClick={() => setCurrentDraft(draft.content)}
                    >
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-medium text-gray-900">Version {draft.version}</span>
                        <span className="text-xs text-gray-500">
                          {new Date(draft.created_at).toLocaleDateString()}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 line-clamp-2 mb-2">
                        {draft.content.replace(/<[^>]*>/g, ' ').substring(0, 150)}...
                      </p>
                      <div className="flex justify-between items-center text-xs text-gray-500">
                        <span>{draft.content.replace(/<[^>]*>/g, '').length} characters</span>
                        {currentDraft === draft.content && (
                          <span className="text-blue-600 font-medium flex items-center space-x-1">
                            <FiCheck className="w-3 h-3" />
                            <span>Current</span>
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                  {drafts.length === 0 && (
                    <div className="text-center py-12 text-gray-500 bg-white rounded-lg border-2 border-dashed border-gray-300">
                      <FiEdit2 className="w-12 h-12 mx-auto mb-3 opacity-50" />
                      <p className="font-medium">No saved drafts yet</p>
                      <p className="text-sm mt-1">Start writing to save your first version</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* AI Chat Tab */}
          {activeTab === 'chat' && (
            <div className="bg-white border border-gray-200 rounded-xl h-[600px] flex flex-col shadow-sm">
              <AIChat
                messages={chatMessages}
                onSendMessage={sendChatMessage}
                isLoading={isChatLoading}
                aiStatus={aiService.aiStatus}
              />
            </div>
          )}

          {/* Collaborate Tab */}
          {activeTab === 'collaborate' && (
            <div className="space-y-6">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">Team Collaboration</h2>
                  <p className="text-gray-600 text-sm">Manage collaborators and team settings</p>
                </div>
                <button 
                  onClick={() => setModal({ type: 'invite' })}
                  disabled={sessionPermissions === 'viewer'}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-all flex items-center space-x-2 shadow-sm"
                >
                  <FiUser className="w-4 h-4" />
                  <span>Invite Collaborator</span>
                </button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Team Members */}
                <div className="lg:col-span-2 space-y-4">
                  <h3 className="font-semibold text-gray-900 text-lg">Team Members</h3>
                  <div className="space-y-3">
                    {/* Current User */}
                    <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg bg-white shadow-sm">
                      <div className="flex items-center space-x-3">
                        <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center text-white font-medium text-lg shadow-sm">
                          {userProfile?.full_name?.[0]?.toUpperCase() || 'U'}
                        </div>
                        <div>
                          <div className="font-medium text-gray-900">{userProfile?.full_name || 'You'}</div>
                          <div className="text-sm text-gray-600">{userProfile?.email}</div>
                          <div className="text-xs text-blue-600 font-medium bg-blue-100 px-2 py-1 rounded-full inline-block mt-1">
                            Session Owner
                          </div>
                        </div>
                      </div>
                      <span className="flex items-center space-x-2 text-green-600 text-sm bg-green-100 px-3 py-1 rounded-full">
                        <FiWifi className="w-4 h-4" />
                        <span>Online</span>
                      </span>
                    </div>
                    
                    {/* Collaborators */}
                    {collaborators.map((collab: any) => (
                      <div key={collab.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg bg-white shadow-sm">
                        <div className="flex items-center space-x-3">
                          <div className="w-12 h-12 bg-gray-500 rounded-full flex items-center justify-center text-white font-medium text-lg shadow-sm">
                            {collab.profiles?.full_name?.[0]?.toUpperCase() || 'C'}
                          </div>
                          <div>
                            <div className="font-medium text-gray-900">{collab.profiles?.full_name || 'Collaborator'}</div>
                            <div className="text-sm text-gray-600">{collab.profiles?.email}</div>
                            <div className={`text-xs capitalize px-2 py-1 rounded-full inline-block mt-1 ${
                              collab.role === 'editor' 
                                ? 'text-green-800 bg-green-100' 
                                : 'text-gray-800 bg-gray-100'
                            }`}>
                              {collab.role}
                            </div>
                          </div>
                        </div>
                        <span className="text-gray-500 text-sm bg-gray-100 px-3 py-1 rounded-full">
                          Invited {new Date(collab.invited_at).toLocaleDateString()}
                        </span>
                      </div>
                    ))}

                    {collaborators.length === 0 && (
                      <div className="text-center py-8 bg-white rounded-lg border-2 border-dashed border-gray-300">
                        <FiUsers className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                        <p className="text-gray-600">No collaborators yet</p>
                        <p className="text-sm text-gray-500 mt-1">Invite team members to collaborate</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Collaboration Tools */}
                <div className="space-y-4">
                  <h3 className="font-semibold text-gray-900 text-lg">Collaboration Tools</h3>
                  <div className="space-y-4">
                    <div className="p-4 border border-gray-200 rounded-lg bg-white shadow-sm">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <div className="font-medium text-gray-900">Live Collaborative Editing</div>
                          <div className="text-sm text-gray-600">Real-time editing with team members</div>
                        </div>
                        <button
                          onClick={() => setIsCollaborativeEditing(!isCollaborativeEditing)}
                          disabled={sessionPermissions === 'viewer'}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                            isCollaborativeEditing ? 'bg-green-600' : 'bg-gray-200'
                          } ${sessionPermissions === 'viewer' ? 'opacity-50 cursor-not-allowed' : ''}`}
                        >
                          <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                            isCollaborativeEditing ? 'translate-x-6' : 'translate-x-1'
                          }`} />
                        </button>
                      </div>
                      <p className="text-sm text-gray-600">
                        {isCollaborativeEditing ? 
                          'Team members can edit simultaneously' : 
                          'Only one person can edit at a time'}
                      </p>
                    </div>

                    <div className="p-4 border border-gray-200 rounded-lg bg-white shadow-sm">
                      <div className="font-medium text-gray-900 mb-3">Recent Activity</div>
                      <div className="space-y-2 max-h-40 overflow-y-auto">
                        {collaborationEvents.slice(-5).reverse().map((event, index) => (
                          <div key={index} className="text-xs text-gray-600 flex items-center space-x-2 p-2 hover:bg-gray-50 rounded">
                            <FiActivity className="w-3 h-3 text-blue-600 flex-shrink-0" />
                            <span className="flex-1 min-w-0 capitalize">{event.type.replace('_', ' ')}</span>
                            <span className="text-gray-400 text-xs flex-shrink-0">
                              {new Date(event.timestamp).toLocaleTimeString()}
                            </span>
                          </div>
                        ))}
                        {collaborationEvents.length === 0 && (
                          <div className="text-center py-4 text-gray-500 text-sm">
                            <FiActivity className="w-8 h-8 mx-auto mb-2 opacity-50" />
                            No recent activity
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      <TabModal
        isOpen={showTabModal}
        onClose={() => {
          setShowTabModal(false);
          setEditingTab(null);
        }}
        onSave={editingTab ? updateTab : createTab}
        editingTab={editingTab}
        onAIAction={handleAIAction}
      />

      <Modal
        isOpen={modal.type === 'invite'}
        onClose={() => setModal({ type: '' })}
        title="Invite Research Collaborator"
        size="md"
      >
        <InviteCollaboratorForm 
          sessionId={sessionId} 
          onInviteSent={() => {
            setModal({ type: 'success', data: { message: 'Collaboration invitation sent successfully!' } });
            loadSessionData();
          }} 
          currentCollaborators={collaborators}
        />
      </Modal>

      <Modal
        isOpen={modal.type === 'success'}
        onClose={() => setModal({ type: '' })}
        title="Success"
        size="sm"
      >
        <div className="flex items-center space-x-3 p-4">
          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
            <FiCheck className="w-5 h-5 text-green-600" />
          </div>
          <div>
            <p className="font-medium text-gray-900">{modal.data?.message}</p>
          </div>
        </div>
      </Modal>

      <Modal
        isOpen={modal.type === 'error'}
        onClose={() => setModal({ type: '' })}
        title="Error"
        size="sm"
      >
        <div className="flex items-center space-x-3 p-4">
          <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
            <FiAlertCircle className="w-5 h-5 text-red-600" />
          </div>
          <div>
            <p className="font-medium text-gray-900">{modal.data?.message}</p>
            <p className="text-sm text-gray-600 mt-1">Please try again or contact support.</p>
          </div>
        </div>
      </Modal>
    </Layout>
  );
}