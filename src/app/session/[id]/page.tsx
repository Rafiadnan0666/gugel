'use client';
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { createClient } from '@/utils/supabase/client';
import Layout from '@/components/Layout';
import type { 
  IResearchSession, 
  ITab, 
  IDraft, 
  ISummary, 
  ISessionMessage, 
  ISessionCollaborator,
  IProfile
} from '@/types/main.db';
import {
  FiPlus, FiEdit2, FiTrash2, FiSave, FiDownload,
  FiExternalLink, FiZap, FiCpu, FiBook, FiLink, FiClock,
  FiUser, FiMessageSquare, FiRefreshCw, FiChevronDown,
  FiChevronUp, FiSearch, FiFilter, FiShare2, FiBookmark,
  FiSend, FiX, FiCheck, FiEdit3, FiMoreVertical, FiAlertCircle,
  FiThumbsUp, FiThumbsDown, FiStar, FiInfo, FiUsers,
  FiEye, FiEyeOff, FiLock, FiUnlock, FiGitBranch, FiGitPullRequest,
  FiArchive, FiActivity, FiBarChart2, FiTrendingUp, FiType,
  FiBold, FiItalic, FiUnderline, FiList, FiAlignLeft,
  FiAlignCenter, FiAlignRight, FiLink2, FiImage, FiTag,
  FiFolder, FiGrid, FiSidebar, FiDatabase, FiCloud,
  FiWifi, FiWifiOff, FiUpload, FiDownloadCloud, FiSettings,
  FiGlobe, FiAward, FiTarget, FiCoffee, FiOctagon, FiCode,
  FiFileText, FiCopy, FiRotateCw, FiShuffle, FiVolume2, FiMaximize
} from 'react-icons/fi';

// AI Service with proper error handling
const useAIService = () => {
  const [aiStatus, setAiStatus] = useState<'loading' | 'ready' | 'error' | 'unavailable'>('unavailable');

  // Mock AI functions since LanguageModel API might not be available
  const generateSummary = async (content: string, type: 'tab' | 'draft') => {
    return `AI Summary for ${type}: ${content.substring(0, 200)}... [This is a mock AI response]`;
  };

  const translateContent = async (content: string, targetLanguage: string) => {
    return `Translated to ${targetLanguage}: ${content}`;
  };

  const rewriteContent = async (content: string, style: string = 'academic') => {
    return `Rewritten in ${style} style: ${content}`;
  };

  const expandContent = async (content: string, context: string) => {
    return `Expanded content with ${context}: ${content}`;
  };

  const autoGenerateDraft = async (tabs: ITab[], theme: string) => {
    const tabTitles = tabs.map(tab => tab.title).join(', ');
    return `Research draft about ${theme} based on: ${tabTitles}. This is an AI-generated draft combining insights from your research tabs.`;
  };

  const chatWithAI = async (message: string, context: { tabs: ITab[], drafts: IDraft[] }) => {
    return `AI Response to: "${message}". I've analyzed your ${context.tabs.length} tabs and ${context.drafts.length} drafts.`;
  };

  const promptAI = async (prompt: string) => {
    return `AI Response: ${prompt.substring(0, 100)}... [Mock AI Service]`;
  };

  return {
    aiStatus,
    generateSummary,
    translateContent,
    rewriteContent,
    expandContent,
    autoGenerateDraft,
    chatWithAI,
    promptAI
  };
};

// Real-time Collaboration Hook
const useCollaboration = (sessionId: string, userId: string) => {
  const [onlineUsers, setOnlineUsers] = useState<any[]>([]);
  const [isCollaborativeEditing, setIsCollaborativeEditing] = useState(false);
  const supabase = createClient();

  useEffect(() => {
    if (!sessionId || !userId) return;

    const channel = supabase.channel(`session:${sessionId}`)
      .on('presence', { event: 'sync' }, () => {
        const state = channel.presenceState();
        const users = Object.values(state).flat() as any[];
        setOnlineUsers(users.filter(user => user.user_id !== userId));
      })
      .subscribe(async (status) => {
        if (status === 'SUBSCRIBED') {
          await channel.track({
            user_id: userId,
            online_at: new Date().toISOString()
          });
        }
      });

    return () => {
      channel.unsubscribe();
    };
  }, [sessionId, userId, supabase]);

  return {
    onlineUsers,
    isCollaborativeEditing,
    setIsCollaborativeEditing
  };
};

// Enhanced Editor Component
const AdvancedEditor: React.FC<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  disabled?: boolean;
  onlineUsers?: any[];
  currentUser?: IProfile | null;
  onAIAction?: (action: string, content: string) => Promise<string>;
}> = ({ value, onChange, placeholder = "Start writing your research findings...", disabled = false, onlineUsers = [], currentUser, onAIAction }) => {
  const editorRef = useRef<HTMLDivElement>(null);
  const [isAILoading, setIsAILoading] = useState(false);
  const [showAITools, setShowAITools] = useState(false);
  
  const formatText = (command: string, value?: string) => {
    document.execCommand(command, false, value);
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML);
    }
  };

  const handleAIAction = async (action: string) => {
    if (!onAIAction || !editorRef.current) return;
    
    const selection = window.getSelection();
    const selectedText = selection?.toString() || editorRef.current.innerText;
    
    if (!selectedText.trim()) return;
    
    setIsAILoading(true);
    try {
      const result = await onAIAction(action, selectedText);
      
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        range.insertNode(document.createTextNode(result));
      } else {
        editorRef.current.innerHTML += `<p>${result}</p>`;
      }
      
      onChange(editorRef.current.innerHTML);
    } catch (error) {
      console.error('AI Action failed:', error);
    } finally {
      setIsAILoading(false);
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const text = e.clipboardData.getData('text/plain');
    document.execCommand('insertText', false, text);
  };

  const AI_TOOLS = [
    { id: 'summarize', label: 'Summarize', icon: FiFileText, description: 'Create a concise summary' },
    { id: 'translate', label: 'Translate', icon: FiGlobe, description: 'Translate to another language' },
    { id: 'rewrite', label: 'Rewrite', icon: FiRotateCw, description: 'Improve writing style' },
    { id: 'expand', label: 'Expand', icon: FiTarget, description: 'Add more details' }
  ];

  return (
    <div className="border border-gray-300 rounded-lg overflow-hidden relative">
      {showAITools && (
        <div className="absolute top-16 right-4 z-20 bg-white border border-gray-200 rounded-lg shadow-xl w-64">
          <div className="p-3 border-b border-gray-200">
            <h4 className="font-semibold text-gray-900">AI Writing Assistant</h4>
          </div>
          <div className="p-2">
            {AI_TOOLS.map(tool => (
              <button
                key={tool.id}
                onClick={() => handleAIAction(tool.id)}
                disabled={isAILoading}
                className="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors text-left"
              >
                <tool.icon className="w-4 h-4 text-blue-600" />
                <div>
                  <div className="font-medium text-gray-900 text-sm">{tool.label}</div>
                  <div className="text-xs text-gray-600">{tool.description}</div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      <div className="flex flex-wrap items-center gap-1 p-2 border-b border-gray-200 bg-gray-50">
        <button 
          onClick={() => setShowAITools(!showAITools)}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
        >
          <FiZap className="w-4 h-4 text-purple-600" />
        </button>
        
        <button onClick={() => formatText('bold')} className="p-2 rounded hover:bg-gray-200">
          <FiBold className="w-4 h-4" />
        </button>
        <button onClick={() => formatText('italic')} className="p-2 rounded hover:bg-gray-200">
          <FiItalic className="w-4 h-4" />
        </button>
        <button onClick={() => formatText('insertUnorderedList')} className="p-2 rounded hover:bg-gray-200">
          <FiList className="w-4 h-4" />
        </button>
      </div>
      
      <div
        ref={editorRef}
        contentEditable={!disabled}
        onInput={(e) => onChange(e.currentTarget.innerHTML)}
        onPaste={handlePaste}
        className="min-h-96 p-4 focus:outline-none prose prose-sm max-w-none bg-white"
        dangerouslySetInnerHTML={{ __html: value || placeholder }}
      />

      {isAILoading && (
        <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center">
          <div className="flex items-center space-x-2 text-blue-600">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span>AI is processing...</span>
          </div>
        </div>
      )}
    </div>
  );
};

// Modal Component
const Modal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className={`bg-white rounded-xl shadow-2xl ${sizeClasses[size]} w-full max-h-[90vh] overflow-y-auto`}>
        <div className="p-6 border-b border-gray-200 flex justify-between items-center">
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <FiX className="w-5 h-5" />
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

// Tab Modal Component
const TabModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSave: (tab: Partial<ITab>) => void;
  editingTab?: ITab | null;
}> = ({ isOpen, onClose, onSave, editingTab }) => {
  const [url, setUrl] = useState(editingTab?.url || '');
  const [title, setTitle] = useState(editingTab?.title || '');
  const [content, setContent] = useState(editingTab?.content || '');

  useEffect(() => {
    if (editingTab) {
      setUrl(editingTab.url);
      setTitle(editingTab.title || '');
      setContent(editingTab.content || '');
    }
  }, [editingTab]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (url.trim()) {
      onSave({
        id: editingTab?.id,
        url,
        title: title || 'New Tab',
        content
      });
      onClose();
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={editingTab ? 'Edit Tab' : 'Add Research Tab'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">URL</label>
          <input
            type="url"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="https://example.com"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Page title"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Content/Notes</label>
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Add your notes..."
            rows={6}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500"
          />
        </div>

        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            {editingTab ? 'Update Tab' : 'Add Tab'}
          </button>
        </div>
      </form>
    </Modal>
  );
};

// AI Chat Component
const AIChat: React.FC<{
  messages: ISessionMessage[];
  onSendMessage: (content: string) => void;
  isLoading: boolean;
}> = ({ messages, onSendMessage, isLoading }) => {
  const [input, setInput] = useState('');
  const chatEndRef = useRef<HTMLDivElement>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() && !isLoading) {
      onSendMessage(input);
      setInput('');
    }
  };

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="flex flex-col h-full bg-gray-50 rounded-lg">
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs lg:max-w-md rounded-lg p-4 ${
              message.sender === 'user' 
                ? 'bg-blue-600 text-white rounded-br-none' 
                : 'bg-white text-gray-900 rounded-bl-none border border-gray-200'
            }`}>
              <p className="text-sm whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-white text-gray-900 rounded-lg rounded-bl-none p-4 border border-gray-200">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={chatEndRef} />
      </div>

      <form onSubmit={handleSubmit} className="p-4 border-t border-gray-200 bg-white">
        <div className="flex space-x-3">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask AI about your research..."
            className="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:border-blue-500"
            disabled={isLoading}
          />
          <button 
            type="submit"
            disabled={isLoading || !input.trim()}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400"
          >
            <FiSend className="w-4 h-4" />
          </button>
        </div>
      </form>
    </div>
  );
};

// Invite Collaborator Form
const InviteCollaboratorForm: React.FC<{
  sessionId: string;
  onInviteSent: () => void;
}> = ({ sessionId, onInviteSent }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'editor' | 'viewer'>('viewer');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const supabase = createClient();

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Find user by email
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('id')
        .eq('email', email)
        .single();

      if (userError || !userData) {
        throw new Error('User not found');
      }

      // Check if already a collaborator
      const { data: existing } = await supabase
        .from('session_collaborators')
        .select('id')
        .eq('session_id', sessionId)
        .eq('user_id', userData.id)
        .single();

      if (existing) {
        throw new Error('User is already a collaborator');
      }

      // Add collaborator
      const { error: insertError } = await supabase
        .from('session_collaborators')
        .insert({
          session_id: sessionId,
          user_id: userData.id,
          role: role,
        });

      if (insertError) throw insertError;

      onInviteSent();
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleInvite} className="space-y-4">
      {error && <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-800">{error}</div>}
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="collaborator@example.com"
          className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Role</label>
        <select
          value={role}
          onChange={(e) => setRole(e.target.value as 'editor' | 'viewer')}
          className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500"
        >
          <option value="viewer">Viewer</option>
          <option value="editor">Editor</option>
        </select>
      </div>

      <button
        type="submit"
        disabled={isLoading}
        className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400"
      >
        {isLoading ? 'Sending...' : 'Send Invite'}
      </button>
    </form>
  );
};

// Main Session Page Component
export default function SessionPage() {
  const params = useParams();
  const router = useRouter();
  const sessionId = params.id as string;
  const supabase = createClient();
  
  // State declarations
  const [session, setSession] = useState<IResearchSession | null>(null);
  const [tabs, setTabs] = useState<ITab[]>([]);
  const [drafts, setDrafts] = useState<IDraft[]>([]);
  const [summaries, setSummaries] = useState<ISummary[]>([]);
  const [currentDraft, setCurrentDraft] = useState('');
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'drafts' | 'chat' | 'collaborate'>('content');
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [chatMessages, setChatMessages] = useState<ISessionMessage[]>([]);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [modal, setModal] = useState<{ type: string; data?: any }>({ type: '' });
  const [userProfile, setUserProfile] = useState<IProfile | null>(null);
  const [sessionPermissions, setSessionPermissions] = useState<'owner' | 'editor' | 'viewer'>('viewer');
  const [showTabModal, setShowTabModal] = useState(false);
  const [editingTab, setEditingTab] = useState<ITab | null>(null);
  const [collaborators, setCollaborators] = useState<ISessionCollaborator[]>([]);

  // Hooks
  const { onlineUsers, isCollaborativeEditing, setIsCollaborativeEditing } = useCollaboration(sessionId, userProfile?.id || '');
  const aiService = useAIService();

  // Load session data
  const loadSessionData = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        router.push('/sign-in');
        return;
      }

      // Load user profile
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      setUserProfile(profile);

      // Load session
      const { data: sessionData } = await supabase
        .from('research_sessions')
        .select('*')
        .eq('id', sessionId)
        .single();

      if (!sessionData) {
        router.push('/dashboard');
        return;
      }

      setSession(sessionData);
      setEditedTitle(sessionData.title);

      // Check permissions
      if (sessionData.user_id === user.id) {
        setSessionPermissions('owner');
      } else {
        const { data: collaborator } = await supabase
          .from('session_collaborators')
          .select('role')
          .eq('session_id', sessionId)
          .eq('user_id', user.id)
          .single();
        
        setSessionPermissions(collaborator?.role || 'viewer');
      }

      // Load related data
      const [tabsResponse, draftsResponse, collaboratorsResponse, messagesResponse] = await Promise.all([
        supabase.from('tabs').select('*').eq('session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('drafts').select('*').eq('research_session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('session_collaborators').select('*').eq('session_id', sessionId),
        supabase.from('session_messages').select('*').eq('session_id', sessionId).order('created_at', { ascending: true })
      ]);

      if (tabsResponse.data) setTabs(tabsResponse.data);
      if (draftsResponse.data) setDrafts(draftsResponse.data);
      if (collaboratorsResponse.data) setCollaborators(collaboratorsResponse.data);
      if (messagesResponse.data) setChatMessages(messagesResponse.data);

      // Load summaries for tabs
      if (tabsResponse.data && tabsResponse.data.length > 0) {
        const tabIds = tabsResponse.data.map(tab => tab.id);
        const { data: summariesData } = await supabase
          .from('summaries')
          .select('*')
          .in('tab_id', tabIds);
        if (summariesData) setSummaries(summariesData);
      }

    } catch (error) {
      console.error('Error loading session:', error);
    } finally {
      setLoading(false);
    }
  };

  // CRUD Operations
  const createTab = async (tabData: Partial<ITab>) => {
    try {
      const { data, error } = await supabase
        .from('tabs')
        .insert([{
          session_id: sessionId,
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
        }])
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => [data, ...prev]);
      setModal({ type: 'success', data: { message: 'Tab created successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const updateTab = async (tabData: Partial<ITab>) => {
    try {
      const { data, error } = await supabase
        .from('tabs')
        .update({
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
        })
        .eq('id', tabData.id)
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => prev.map(tab => tab.id === tabData.id ? data : tab));
      setModal({ type: 'success', data: { message: 'Tab updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const deleteTab = async (tabId: string) => {
    if (!confirm('Are you sure you want to delete this tab?')) return;
    
    try {
      const { error } = await supabase
        .from('tabs')
        .delete()
        .eq('id', tabId);

      if (error) throw error;
      
      setTabs(prev => prev.filter(tab => tab.id !== tabId));
      setModal({ type: 'success', data: { message: 'Tab deleted successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const saveDraft = async () => {
    if (!sessionId || !currentDraft.trim()) {
      setModal({ type: 'error', data: { message: 'Cannot save empty draft.' } });
      return;
    }

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('drafts')
        .insert([{
          research_session_id: sessionId,
          content: currentDraft,
          version: drafts.length + 1,
          user_id: user.id
        }])
        .select()
        .single();

      if (error) throw error;
      
      setDrafts(prev => [data, ...prev]);
      setModal({ type: 'success', data: { message: 'Draft saved successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const updateSessionTitle = async () => {
    if (!sessionId || !editedTitle.trim()) return;

    try {
      const { data, error } = await supabase
        .from('research_sessions')
        .update({ title: editedTitle })
        .eq('id', sessionId)
        .select()
        .single();

      if (error) throw error;
      
      setSession(data);
      setIsEditingTitle(false);
      setModal({ type: 'success', data: { message: 'Title updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message } });
    }
  };

  const sendChatMessage = async (content: string) => {
    const userMessage: ISessionMessage = {
      id: Date.now().toString(),
      session_id: sessionId,
      user_id: userProfile?.id,
      content,
      sender: 'user',
      created_at: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setIsChatLoading(true);

    try {
      const aiResponse = await aiService.chatWithAI(content, { tabs, drafts });
      const aiMessage: ISessionMessage = {
        id: (Date.now() + 1).toString(),
        session_id: sessionId,
        content: aiResponse,
        sender: 'ai',
        created_at: new Date()
      };

      setChatMessages(prev => [...prev, aiMessage]);

      // Save message to database
      await supabase
        .from('session_messages')
        .insert([userMessage, aiMessage]);

    } catch (error) {
      console.error('Error getting AI response:', error);
    } finally {
      setIsChatLoading(false);
    }
  };

  const handleAIAction = async (action: string, content: string) => {
    switch (action) {
      case 'summarize':
        return await aiService.generateSummary(content, 'draft');
      case 'translate':
        return await aiService.translateContent(content, 'English');
      case 'rewrite':
        return await aiService.rewriteContent(content, 'academic');
      case 'expand':
        return await aiService.expandContent(content, 'detailed analysis');
      default:
        return content;
    }
  };

  // Initial load
  useEffect(() => {
    if (sessionId) {
      loadSessionData();
    }
  }, [sessionId]);

  if (loading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </Layout>
    );
  }

  if (!session) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Session not found</h1>
            <button 
              onClick={() => router.push('/dashboard')} 
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
            >
              Back to Dashboard
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <button 
            onClick={() => router.push('/dashboard')} 
            className="text-gray-600 hover:text-black mb-4"
          >
            ← Back to Dashboard
          </button>
          
          <div className="flex items-center gap-3 mb-2">
            {isEditingTitle ? (
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  value={editedTitle}
                  onChange={(e) => setEditedTitle(e.target.value)}
                  className="text-3xl font-bold text-gray-900 bg-transparent border-b-2 border-blue-500"
                  autoFocus
                  onKeyPress={(e) => e.key === 'Enter' && updateSessionTitle()}
                />
                <button onClick={updateSessionTitle} className="p-2 text-green-600">
                  <FiCheck className="w-5 h-5" />
                </button>
                <button onClick={() => setIsEditingTitle(false)} className="p-2 text-red-600">
                  <FiX className="w-5 h-5" />
                </button>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <h1 className="text-3xl font-bold text-gray-900">{session.title}</h1>
                {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                  <button 
                    onClick={() => setIsEditingTitle(true)} 
                    className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg"
                  >
                    <FiEdit3 className="w-5 h-5" />
                  </button>
                )}
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-4 text-gray-600">
            <span>Created {new Date(session.created_at).toLocaleDateString()}</span>
            <span>•</span>
            <span>{tabs.length} research tabs</span>
            <span>•</span>
            <span>{drafts.length} drafts</span>
            <span>•</span>
            <span>{collaborators.length + 1} collaborators</span>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex border-b border-gray-200 mb-8">
          {[
            { id: 'content', label: 'Research Content', icon: FiBook },
            { id: 'drafts', label: 'Drafts', icon: FiEdit2 },
            { id: 'chat', label: 'AI Chat', icon: FiMessageSquare },
            { id: 'collaborate', label: 'Collaborate', icon: FiUsers }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveTab(id as any)}
              className={`flex items-center space-x-2 px-6 py-3 border-b-2 font-medium ${
                activeTab === id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <Icon className="w-4 h-4" />
              <span>{label}</span>
            </button>
          ))}
        </div>

        {/* Content Tab */}
        {activeTab === 'content' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold">Research Tabs</h2>
              {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                <button 
                  onClick={() => {
                    setEditingTab(null);
                    setShowTabModal(true);
                  }}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                >
                  <FiPlus className="w-4 h-4 mr-2 inline" />
                  Add Tab
                </button>
              )}
            </div>

            {tabs.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {tabs.map((tab) => (
                  <div key={tab.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-3">
                      <h3 className="font-semibold text-gray-900 truncate">{tab.title || 'Untitled'}</h3>
                      <div className="flex space-x-1">
                        <a 
                          href={tab.url} 
                          target="_blank" 
                          rel="noopener noreferrer" 
                          className="p-1 text-gray-400 hover:text-blue-600"
                        >
                          <FiExternalLink className="w-4 h-4" />
                        </a>
                        {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                          <>
                            <button 
                              onClick={() => {
                                setEditingTab(tab);
                                setShowTabModal(true);
                              }}
                              className="p-1 text-gray-400 hover:text-green-600"
                            >
                              <FiEdit2 className="w-4 h-4" />
                            </button>
                            <button 
                              onClick={() => deleteTab(tab.id)} 
                              className="p-1 text-gray-400 hover:text-red-600"
                            >
                              <FiTrash2 className="w-4 h-4" />
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                    
                    <p className="text-sm text-gray-600 truncate mb-2">{tab.url}</p>
                    
                    {tab.content && (
                      <p className="text-sm text-gray-700 line-clamp-3 mb-3">{tab.content}</p>
                    )}
                    
                    <div className="text-xs text-gray-500">
                      Added {new Date(tab.created_at).toLocaleDateString()}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <FiBook className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                <p className="text-gray-600">No research tabs yet. Start by adding research sources.</p>
              </div>
            )}
          </div>
        )}

        {/* Drafts Tab */}
        {activeTab === 'drafts' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold">Research Draft</h2>
                <div className="flex space-x-2">
                  <button 
                    onClick={saveDraft}
                    disabled={sessionPermissions === 'viewer' || !currentDraft.trim()}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400"
                  >
                    <FiSave className="w-4 h-4 mr-2 inline" />
                    Save Draft
                  </button>
                </div>
              </div>
              
              <AdvancedEditor
                value={currentDraft}
                onChange={setCurrentDraft}
                placeholder="Start writing your research findings..."
                disabled={sessionPermissions === 'viewer'}
                onAIAction={handleAIAction}
              />
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Draft Versions</h3>
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {drafts.map((draft) => (
                  <div 
                    key={draft.id} 
                    className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer"
                    onClick={() => setCurrentDraft(draft.content)}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium">Version {draft.version}</span>
                      <span className="text-xs text-gray-500">
                        {new Date(draft.created_at).toLocaleDateString()}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 line-clamp-3">
                      {draft.content.substring(0, 200)}...
                    </p>
                  </div>
                ))}
                {drafts.length === 0 && (
                  <p className="text-gray-500 text-center py-8">No saved drafts yet.</p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* AI Chat Tab */}
        {activeTab === 'chat' && (
          <div className="bg-white border border-gray-200 rounded-xl h-[600px] flex flex-col">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold">AI Research Assistant</h2>
            </div>
            <AIChat
              messages={chatMessages}
              onSendMessage={sendChatMessage}
              isLoading={isChatLoading}
            />
          </div>
        )}

        {/* Collaborate Tab */}
        {activeTab === 'collaborate' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold">Collaboration</h2>
              <button 
                onClick={() => setModal({ type: 'invite' })}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
              >
                <FiUser className="w-4 h-4 mr-2 inline" />
                Invite Collaborator
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-4">Team Members</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white">
                        {userProfile?.full_name?.[0]?.toUpperCase() || 'U'}
                      </div>
                      <div>
                        <div className="font-medium">{userProfile?.full_name || 'You'}</div>
                        <div className="text-sm text-gray-600">Owner</div>
                      </div>
                    </div>
                    <span className="text-green-600 text-sm">Online</span>
                  </div>
                  
                  {collaborators.map((collab) => (
                    <div key={collab.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-gray-500 rounded-full flex items-center justify-center text-white">
                          U
                        </div>
                        <div>
                          <div className="font-medium">Collaborator</div>
                          <div className="text-sm text-gray-600">{collab.role}</div>
                        </div>
                      </div>
                      <span className="text-gray-500 text-sm">Offline</span>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="font-semibold mb-4">Collaboration Tools</h3>
                <div className="space-y-3">
                  <div className="p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium">Live Editing</span>
                      <button
                        onClick={() => setIsCollaborativeEditing(!isCollaborativeEditing)}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full ${
                          isCollaborativeEditing ? 'bg-green-600' : 'bg-gray-200'
                        }`}
                      >
                        <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                          isCollaborativeEditing ? 'translate-x-6' : 'translate-x-1'
                        }`} />
                      </button>
                    </div>
                    <p className="text-sm text-gray-600">
                      {isCollaborativeEditing ? 'Enabled' : 'Disabled'}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Modals */}
      <TabModal
        isOpen={showTabModal}
        onClose={() => {
          setShowTabModal(false);
          setEditingTab(null);
        }}
        onSave={editingTab ? updateTab : createTab}
        editingTab={editingTab}
      />

      <Modal
        isOpen={modal.type === 'invite'}
        onClose={() => setModal({ type: '' })}
        title="Invite Collaborator"
        size="sm"
      >
        <InviteCollaboratorForm 
          sessionId={sessionId} 
          onInviteSent={() => setModal({ type: 'success', data: { message: 'Invite sent successfully!' } })} 
        />
      </Modal>

      <Modal
        isOpen={modal.type === 'success'}
        onClose={() => setModal({ type: '' })}
        title="Success"
        size="sm"
      >
        <div className="flex items-center space-x-3">
          <FiCheck className="w-6 h-6 text-green-600" />
          <p>{modal.data?.message}</p>
        </div>
      </Modal>

      <Modal
        isOpen={modal.type === 'error'}
        onClose={() => setModal({ type: '' })}
        title="Error"
        size="sm"
      >
        <div className="flex items-center space-x-3">
          <FiAlertCircle className="w-6 h-6 text-red-600" />
          <p>{modal.data?.message}</p>
        </div>
      </Modal>
    </Layout>
  );
}