'use client';
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { createClient } from '@/utils/supabase/client';
import Layout from '@/components/Layout';
import type { 
  IResearchSession, 
  ITab, 
  IDraft, 
  ISummary, 
  ISessionMessage, 
  ISessionCollaborator,
  IProfile,
  ITeam,
  ITeamMember 
} from '@/types/main.db';
import {
  FiPlus, FiEdit2, FiTrash2, FiSave, FiDownload,
  FiExternalLink, FiZap, FiCpu, FiBook, FiLink, FiClock,
  FiUser, FiMessageSquare, FiRefreshCw, FiChevronDown,
  FiChevronUp, FiSearch, FiFilter, FiShare2, FiBookmark,
  FiSend, FiX, FiCheck, FiEdit3, FiMoreVertical, FiAlertCircle,
  FiThumbsUp, FiThumbsDown, FiStar, FiInfo, FiUsers,
  FiEye, FiEyeOff, FiLock, FiUnlock, FiGitBranch, FiGitPullRequest,
  FiArchive, FiActivity, FiBarChart2, FiTrendingUp, FiType,
  FiBold, FiItalic, FiUnderline, FiList, FiAlignLeft,
  FiAlignCenter, FiAlignRight, FiLink2, FiImage, FiTag,
  FiFolder, FiGrid, FiSidebar, FiDatabase, FiCloud,
  FiWifi, FiWifiOff, FiUpload, FiDownloadCloud, FiSettings,
  FiGlobe, FiAward, FiTarget, FiCoffee, FiOctagon, FiCode,
  FiFileText, FiCopy, FiRotateCw, FiShuffle, FiVolume2,FiMaximize
} from 'react-icons/fi';
import AIResponse from '@/components/AIResponse';
import { exportToPDF } from '@/lib/pdf';

// Enhanced AI Service with Language Model Integration
const useAIService = () => {
  const [aiSession, setAiSession] = useState<any>(null);
  const [aiStatus, setAiStatus] = useState<'loading' | 'ready' | 'error' | 'unavailable'>('loading');

  useEffect(() => {
    const initializeAI = async () => {
      try {
        // Check if LanguageModel API is available
        if (!(window as any).LanguageModel) {
          console.warn("LanguageModel API not available, using fallback");
          setAiStatus('unavailable');
          return;
        }

        const opts = {
          expectedOutputs: [{ type: "text", languages: ["en"] }]
        };

        const availability = await (window as any).LanguageModel.availability(opts);
        console.log("AI availability:", availability);

        if (availability === "unavailable") {
          console.warn("AI model unavailable");
          setAiStatus('unavailable');
          return;
        }

        const session = await (window as any).LanguageModel.create({
          ...opts,
          monitor(m: any) {
            m.addEventListener("downloadprogress", (e: any) => {
              console.log(`AI download progress: ${(e.loaded * 100).toFixed(1)}%`);
            });
            m.addEventListener("statechange", (e: any) => {
              console.log("AI state change:", e.target.state);
            });
          }
        });

        setAiSession(session);
        setAiStatus('ready');

      } catch (err) {
        console.error("AI initialization error:", err);
        setAiStatus('error');
      }
    };

    initializeAI();
  }, []);

  const promptAI = async (prompt: string) => {
    if (!aiSession) {
      console.error("AI session not ready");
      return "AI not available";
    }
    try {
      const result = await aiSession.prompt(prompt);
      return result;
    } catch (error) {
      console.error("Error prompting AI:", error);
      return "Error from AI";
    }
  };

  const generateSummary = async (content: string, type: 'tab' | 'draft') => {
    const prompt = `Summarize this ${type} content in a concise and informative way: ${content.substring(0, 2000)}`;
    return await promptAI(prompt);
  };

  const translateContent = async (content: string, targetLanguage: string) => {
    const prompt = `Translate the following text to ${targetLanguage}. Keep the meaning accurate and natural: ${content.substring(0, 2000)}`;
    return await promptAI(prompt);
  };

  const rewriteContent = async (content: string, style: string = 'academic') => {
    const prompt = `Rewrite the following text in ${style} style while preserving the core meaning: ${content.substring(0, 2000)}`;
    return await promptAI(prompt);
  };

  const expandContent = async (content: string, context: string) => {
    const prompt = `Expand this content with additional ${context}. Make it more detailed and comprehensive: ${content.substring(0, 2000)}`;
    return await promptAI(prompt);
  };

  const autoGenerateDraft = async (tabs: ITab[], theme: string) => {
    const tabContents = tabs.map(tab => 
      `Source: ${tab.title}\nContent: ${tab.content?.substring(0, 500)}`
    ).join('\n\n');
    
    const prompt = `Create a well-structured research draft about "${theme}" using these sources. Include introduction, key findings, and conclusion:\n\n${tabContents}`;
    return await promptAI(prompt);
  };

  const chatWithAI = async (message: string, context: { tabs: ITab[], drafts: IDraft[] }) => {
    const contextSummary = `Research Context: ${context.tabs.length} research sources, ${context.drafts.length} drafts`;
    const prompt = `${contextSummary}\n\nUser Question: ${message}\n\nPlease provide a helpful and accurate response based on the research context.`;
    return await promptAI(prompt);
  };

  const analyzeURLContent = async (url: string) => {
    const prompt = `Analyze the content from this URL and provide a comprehensive summary with key points: ${url}`;
    return await promptAI(prompt);
  };

  return {
    aiStatus,
    generateSummary,
    translateContent,
    rewriteContent,
    expandContent,
    autoGenerateDraft,
    chatWithAI,
    analyzeURLContent,
    promptAI
  };
};

// Enhanced Real-time Collaboration Hook
const useCollaboration = (sessionId: string, userId: string) => {
  const [onlineUsers, setOnlineUsers] = useState<any[]>([]);
  const [isCollaborativeEditing, setIsCollaborativeEditing] = useState(false);
  const [cursorPositions, setCursorPositions] = useState<Record<string, any>>({});
  const [editingStates, setEditingStates] = useState<Record<string, any>>({});
  const supabase = createClient();

  useEffect(() => {
    if (!sessionId || !userId) return;

    const channel = supabase.channel(`session:${sessionId}`)
      .on('presence', { event: 'sync' }, () => {
        const state = channel.presenceState();
        const users = Object.values(state).flat() as any[];
        setOnlineUsers(users.filter(user => user.user_id !== userId));
      })
      .on('presence', { event: 'join' }, ({ key, newPresences }) => {
        console.log('User joined:', newPresences);
      })
      .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
        console.log('User left:', leftPresences);
      })
      .on('broadcast', { event: 'cursor_move' }, ({ payload }) => {
        setCursorPositions(prev => ({
          ...prev,
          [payload.userId]: payload.position
        }));
      })
      .on('broadcast', { event: 'editing_state' }, ({ payload }) => {
        setEditingStates(prev => ({
          ...prev,
          [payload.userId]: payload.state
        }));
      })
      .subscribe(async (status) => {
        if (status === 'SUBSCRIBED') {
          await channel.track({
            user_id: userId,
            online_at: new Date().toISOString(),
            cursor_position: null,
            editing_state: null
          });
        }
      });

    return () => {
      channel.unsubscribe();
    };
  }, [sessionId, userId, supabase]);

  const broadcastCursorPosition = (position: any) => {
    const channel = supabase.channel(`session:${sessionId}`);
    channel.send({
      type: 'broadcast',
      event: 'cursor_move',
      payload: { userId, position }
    });
  };

  const broadcastEditingState = (state: any) => {
    const channel = supabase.channel(`session:${sessionId}`);
    channel.send({
      type: 'broadcast',
      event: 'editing_state',
      payload: { userId, state }
    });
  };

  return {
    onlineUsers,
    isCollaborativeEditing,
    setIsCollaborativeEditing,
    cursorPositions,
    editingStates,
    broadcastCursorPosition,
    broadcastEditingState
  };
};

// Advanced Collaborative Editor Component
const AdvancedEditor: React.FC<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  disabled?: boolean;
  onlineUsers?: any[];
  currentUser?: IProfile | null;
  onAIAction?: (action: string, content: string) => Promise<string>;
}> = ({ value, onChange, placeholder = "Start writing your research findings...", disabled = false, onlineUsers = [], currentUser, onAIAction }) => {
  const editorRef = useRef<HTMLDivElement>(null);
  const [isAILoading, setIsAILoading] = useState(false);
  const [showAITools, setShowAITools] = useState(false);
  
  const formatText = (command: string, value?: string) => {
    document.execCommand(command, false, value);
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML);
    }
  };

  const handleAIAction = async (action: string) => {
    if (!onAIAction || !editorRef.current) return;
    
    const selection = window.getSelection();
    const selectedText = selection?.toString() || editorRef.current.innerText;
    
    if (!selectedText.trim()) {
      alert('Please select some text to use AI tools');
      return;
    }
    
    setIsAILoading(true);
    try {
      const result = await onAIAction(action, selectedText);
      
      // Replace selection with AI result
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        const textNode = document.createTextNode(result);
        range.insertNode(textNode);
        
        // Move cursor after inserted text
        range.setStartAfter(textNode);
        range.setEndAfter(textNode);
        selection.removeAllRanges();
        selection.addRange(range);
      } else {
        // If no selection, append to end
        const p = document.createElement('p');
        p.textContent = result;
        editorRef.current.appendChild(p);
      }
      
      onChange(editorRef.current.innerHTML);
    } catch (error) {
      console.error('AI Action failed:', error);
      alert('AI action failed. Please try again.');
    } finally {
      setIsAILoading(false);
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const text = e.clipboardData.getData('text/plain');
    document.execCommand('insertText', false, text);
  };

  const AI_TOOLS = [
    { id: 'summarize', label: 'Summarize', icon: FiFileText, description: 'Create a concise summary' },
    { id: 'translate', label: 'Translate', icon: FiGlobe, description: 'Translate to another language' },
    { id: 'rewrite', label: 'Rewrite', icon: FiRotateCw, description: 'Improve writing style' },
    { id: 'expand', label: 'Expand', icon: FiTarget, description: 'Add more details' },
    { id: 'simplify', label: 'Simplify', icon: FiCoffee, description: 'Make text easier to understand' },
    { id: 'formalize', label: 'Formalize', icon: FiAward, description: 'Make more professional' }
  ];

  return (
    <div className="border border-gray-300 rounded-lg overflow-hidden relative">
      {/* AI Tools Panel */}
      {showAITools && (
        <div className="absolute top-16 right-4 z-20 bg-white border border-gray-200 rounded-lg shadow-xl w-64 animate-fade-in-down-fast">
          <div className="p-3 border-b border-gray-200">
            <h4 className="font-semibold text-gray-900">AI Writing Assistant</h4>
            <p className="text-sm text-gray-600">Select text to use AI tools</p>
          </div>
          <div className="p-2 max-h-64 overflow-y-auto">
            {AI_TOOLS.map(tool => (
              <button
                key={tool.id}
                onClick={() => handleAIAction(tool.id)}
                disabled={isAILoading}
                className="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors text-left disabled:opacity-50"
              >
                <tool.icon className="w-4 h-4 text-blue-600 flex-shrink-0" />
                <div className="flex-1 min-w-0">
                  <div className="font-medium text-gray-900 text-sm">{tool.label}</div>
                  <div className="text-xs text-gray-600">{tool.description}</div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Collaboration Status Bar */}
      {onlineUsers.length > 0 && (
        <div className="flex items-center justify-between px-4 py-2 bg-blue-50 border-b border-blue-200">
          <div className="flex items-center space-x-2">
            <div className="flex -space-x-2">
              {onlineUsers.slice(0, 3).map((user, index) => (
                <div key={user.user_id} className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs">
                  {user.name?.[0]?.toUpperCase() || 'U'}
                </div>
              ))}
              {onlineUsers.length > 3 && (
                <div className="w-6 h-6 bg-blue-300 rounded-full flex items-center justify-center text-blue-700 text-xs">
                  +{onlineUsers.length - 3}
                </div>
              )}
            </div>
            <span className="text-sm text-blue-700">{onlineUsers.length} collaborator(s) online</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-blue-700">Live</span>
          </div>
        </div>
      )}

      {/* Enhanced Toolbar */}
      <div className="flex flex-wrap items-center gap-1 p-2 border-b border-gray-200 bg-gray-50">
        {/* AI Tools Toggle */}
        <button 
          type="button" 
          onClick={() => setShowAITools(!showAITools)}
          className="p-2 rounded hover:bg-gray-200 transition-colors relative"
          title="AI Writing Tools"
        >
          <FiOctagon className="w-4 h-4 text-purple-600" />
          {showAITools && <div className="absolute top-0 right-0 w-2 h-2 bg-purple-500 rounded-full"></div>}
        </button>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>

        {/* Formatting Tools */}
        <button 
          type="button" 
          onClick={() => formatText('bold')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Bold"
        >
          <FiBold className="w-4 h-4" />
        </button>
        <button 
          type="button" 
          onClick={() => formatText('italic')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Italic"
        >
          <FiItalic className="w-4 h-4" />
        </button>
        <button 
          type="button" 
          onClick={() => formatText('underline')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Underline"
        >
          <FiUnderline className="w-4 h-4" />
        </button>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>

        {/* Alignment */}
        <button 
          type="button" 
          onClick={() => formatText('justifyLeft')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Align Left"
        >
          <FiAlignLeft className="w-4 h-4" />
        </button>
        <button 
          type="button" 
          onClick={() => formatText('justifyCenter')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Align Center"
        >
          <FiAlignCenter className="w-4 h-4" />
        </button>
        <button 
          type="button" 
          onClick={() => formatText('justifyRight')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Align Right"
        >
          <FiAlignRight className="w-4 h-4" />
        </button>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>

        {/* Lists */}
        <button 
          type="button" 
          onClick={() => formatText('insertUnorderedList')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Bullet List"
        >
          <FiList className="w-4 h-4" />
        </button>
        
        {/* Links */}
        <button 
          type="button" 
          onClick={() => {
            const url = prompt('Enter URL:');
            if (url) formatText('createLink', url);
          }}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Insert Link"
        >
          <FiLink2 className="w-4 h-4" />
        </button>
        
        <div className="w-px h-6 bg-gray-300 mx-1"></div>

        {/* Headings */}
        <button 
          type="button" 
          onClick={() => formatText('formatBlock', '<h1>')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Heading 1"
        >
          <span className="text-sm font-bold">H1</span>
        </button>
        <button 
          type="button" 
          onClick={() => formatText('formatBlock', '<h2>')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Heading 2"
        >
          <span className="text-sm font-bold">H2</span>
        </button>
        <button 
          type="button" 
          onClick={() => formatText('formatBlock', '<h3>')}
          className="p-2 rounded hover:bg-gray-200 transition-colors"
          title="Heading 3"
        >
          <span className="text-sm font-bold">H3</span>
        </button>
      </div>
      
      {/* Editor */}
      <div
        ref={editorRef}
        contentEditable={!disabled}
        onInput={(e) => onChange(e.currentTarget.innerHTML)}
        onPaste={handlePaste}
        className="min-h-96 p-4 focus:outline-none prose prose-sm max-w-none bg-white"
        dangerouslySetInnerHTML={{ __html: value || `<p>${placeholder}</p>` }}
        style={{ 
          fontFamily: "'Inter', sans-serif",
          lineHeight: '1.6',
          minHeight: '400px'
        }}
      />

      {/* AI Loading Overlay */}
      {isAILoading && (
        <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center z-10">
          <div className="flex items-center space-x-2 text-blue-600">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span>AI is processing...</span>
          </div>
        </div>
      )}
    </div>
  );
};

// Full Screen Editor Modal
const FullScreenEditor: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  value: string;
  onChange: (value: string) => void;
  onSave: () => void;
  onAIAction: (action: string, content: string) => Promise<string>;
  title?: string;
}> = ({ isOpen, onClose, value, onChange, onSave, onAIAction, title = "Advanced Editor" }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-white z-50 flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
        <div className="flex items-center space-x-4">
          <button 
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <FiX className="w-5 h-5" />
          </button>
          <h2 className="text-xl font-semibold">{title}</h2>
        </div>
        
        <div className="flex items-center space-x-3">
          <button 
            onClick={onSave}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center transition-colors"
          >
            <FiSave className="w-4 h-4 mr-2" />
            Save Draft
          </button>
        </div>
      </div>

      {/* Editor */}
      <div className="flex-1 overflow-hidden">
        <AdvancedEditor
          value={value}
          onChange={onChange}
          onAIAction={onAIAction}
          placeholder="Start writing your research draft..."
        />
      </div>
    </div>
  );
};

// Enhanced Modal Component
const Modal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  actionButton?: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}> = ({ isOpen, onClose, title, children, actionButton, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className={`bg-white rounded-xl shadow-2xl ${sizeClasses[size]} w-full max-h-[90vh] overflow-y-auto`}>
        <div className="p-6 border-b border-gray-200 flex justify-between items-center sticky top-0 bg-white z-10">
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          <button 
            onClick={onClose} 
            className="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
          >
            <FiX className="w-5 h-5" />
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
        {actionButton && (
          <div className="p-6 border-t border-gray-200 flex justify-end space-x-3 sticky bottom-0 bg-white">
            <button
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            {actionButton}
          </div>
        )}
      </div>
    </div>
  );
};

// AI-Powered Tab Modal
const AITabModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSave: (tab: Partial<ITab>) => void;
  editingTab?: ITab | null;
  onAIAnalyze?: (url: string) => Promise<{ title: string; content: string }>;
}> = ({ isOpen, onClose, onSave, editingTab, onAIAnalyze }) => {
  const [url, setUrl] = useState(editingTab?.url || '');
  const [title, setTitle] = useState(editingTab?.title || '');
  const [content, setContent] = useState(editingTab?.content || '');
  const [isFetching, setIsFetching] = useState(false);
  const [aiAnalysis, setAiAnalysis] = useState<string>('');

  useEffect(() => {
    if (editingTab) {
      setUrl(editingTab.url);
      setTitle(editingTab.title || '');
      setContent(editingTab.content || '');
    } else {
      setUrl('');
      setTitle('');
      setContent('');
      setAiAnalysis('');
    }
  }, [editingTab, isOpen]);

  const fetchWithAI = async () => {
    if (!url.trim() || !onAIAnalyze) return;
    
    try {
      setIsFetching(true);
      setAiAnalysis('Analyzing URL content with AI...');
      
      let processedUrl = url;
      if (!url.startsWith('http')) {
        processedUrl = 'https://' + url;
      }
      
      const result = await onAIAnalyze(processedUrl);
      setTitle(result.title);
      setContent(result.content);
      setAiAnalysis('✅ AI has successfully analyzed the content and extracted key information.');
      
    } catch (error) {
      console.error('AI Analysis failed:', error);
      setAiAnalysis('❌ AI analysis failed. Please add content manually.');
    } finally {
      setIsFetching(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (url.trim()) {
      onSave({
        id: editingTab?.id,
        url,
        title: title || new URL(url).hostname,
        content,
      });
      onClose();
    }
  };

  const isValidUrl = (string: string) => {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={editingTab ? 'Edit Research Tab' : 'Add AI-Powered Research Tab'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">URL</label>
          <div className="flex space-x-2">
            <input
              type="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="https://example.com"
              className="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
              required
            />
            <button
              type="button"
              onClick={fetchWithAI}
              disabled={!url.trim() || isFetching || !isValidUrl(url.startsWith('http') ? url : 'https://' + url)}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 flex items-center transition-colors"
            >
              <FiOctagon className="w-4 h-4 mr-2" />
              {isFetching ? 'Analyzing...' : 'AI Analyze'}
            </button>
          </div>
        </div>
        
        {aiAnalysis && (
          <div className={`p-3 rounded-lg border ${
            aiAnalysis.includes('❌') 
              ? 'bg-red-50 border-red-200 text-red-800'
              : aiAnalysis.includes('✅')
              ? 'bg-green-50 border-green-200 text-green-800'
              : 'bg-purple-50 border-purple-200 text-purple-800'
          }`}>
            <p className="text-sm flex items-center">
              <FiInfo className="w-4 h-4 mr-2" />
              {aiAnalysis}
            </p>
          </div>
        )}

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Page title"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Content/Notes</label>
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Add your notes or let AI analyze the content..."
            rows={6}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
          />
          {isFetching && (
            <div className="flex items-center space-x-2 text-gray-500 mt-1">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
              <span className="text-sm">AI is analyzing content...</span>
            </div>
          )}
        </div>

        <div className="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={!url.trim()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors"
          >
            {editingTab ? 'Update Tab' : 'Add Tab'}
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Enhanced AI Chat Component
const AIChat: React.FC<{
  messages: ISessionMessage[];
  onSendMessage: (content: string) => void;
  isLoading: boolean;
  researchContext: { tabs: ITab[]; drafts: IDraft[] };
}> = ({ messages, onSendMessage, isLoading, researchContext }) => {
  const [input, setInput] = useState('');
  const [suggestedQuestions, setSuggestedQuestions] = useState<string[]>([]);
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Generate suggested questions based on research context
    const suggestions = [
      "Summarize my research findings",
      "Suggest a structure for my draft",
      "What are the key themes in my sources?",
      "Help me write an introduction",
      "Find connections between my tabs"
    ];
    setSuggestedQuestions(suggestions);
  }, [researchContext]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() && !isLoading) {
      onSendMessage(input);
      setInput('');
    }
  };

  const handleSuggestionClick = (question: string) => {
    setInput(question);
  };

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="flex flex-col h-full bg-gray-50 rounded-lg">
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <div className="text-center py-8">
            <FiMessageSquare className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Start a conversation with AI</h3>
            <p className="text-gray-600">Ask questions about your research or use the suggestions below.</p>
          </div>
        ) : (
          messages.map((message) => (
            <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-xs lg:max-w-md rounded-lg p-4 ${
                message.sender === 'user' 
                  ? 'bg-blue-600 text-white rounded-br-none' 
                  : 'bg-white text-gray-900 rounded-bl-none border border-gray-200 shadow-sm'
              }`}>
                {message.sender === 'user' ? (
                  <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                ) : (
                  <AIResponse content={message.content} />
                )}
                <span className={`text-xs block mt-2 ${
                  message.sender === 'user' ? 'text-blue-200' : 'text-gray-500'
                }`}>
                  {new Date(message.created_at).toLocaleTimeString()}
                </span>
              </div>
            </div>
          ))
        )}
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-white text-gray-900 rounded-lg rounded-bl-none p-4 border border-gray-200 shadow-sm">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                <span className="text-sm text-gray-600">AI is thinking...</span>
              </div>
            </div>
          </div>
        )}
        <div ref={chatEndRef} />
      </div>

      {/* Suggested Questions */}
      {suggestedQuestions.length > 0 && input.length === 0 && messages.length === 0 && (
        <div className="px-4 pb-2">
          <div className="flex flex-wrap gap-2">
            {suggestedQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => handleSuggestionClick(question)}
                className="text-xs bg-white border border-gray-200 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-50 transition-colors"
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <form onSubmit={handleSubmit} className="p-4 border-t border-gray-200 bg-white">
        <div className="flex space-x-3">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask AI about your research..."
            className="flex-1 border border-gray-300 rounded-lg px-4 py-3 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
            disabled={isLoading}
          />
          <button 
            type="submit"
            disabled={isLoading || !input.trim()}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors flex items-center"
          >
            <FiSend className="w-4 h-4" />
          </button>
        </div>
      </form>
    </div>
  );
};

const InviteCollaboratorForm: React.FC<{
  sessionId: string;
  onInviteSent: () => void;
  editedTitle: string;
  session: IResearchSession | null;
}> = ({ sessionId, onInviteSent, editedTitle, session }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState<'editor' | 'viewer'>('viewer');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const supabase = createClient();

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    setSuccess(null);

    try {
      // Find user by email
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('id')
        .eq('email', email)
        .single();

      if (userError || !userData) {
        throw new Error('User with this email not found.');
      }

      const userId = userData.id;

      // Check if already a collaborator
      const { data: existingCollaborator, error: existingError } = await supabase
        .from('session_collaborators')
        .select('id')
        .eq('session_id', sessionId)
        .eq('user_id', userId)
        .single();

      if (existingCollaborator) {
        throw new Error('User is already a collaborator.');
      }

      // Add collaborator
      const { error: insertError } = await supabase
        .from('session_collaborators')
        .insert({
          session_id: sessionId,
          user_id: userId,
          role: role,
        });

      if (insertError) {
        throw insertError;
      }

      // Create notification
      const { error: notificationError } = await supabase
        .from('notifications')
        .insert({
          user_id: userId,
          type: 'session_invitation',
          message: `You have been invited to collaborate on the session "${editedTitle || session?.title}"`,
          read: false,
        });

      if (notificationError) {
        console.warn('Failed to create notification:', notificationError);
      }

      setSuccess(`Successfully invited ${email} as a ${role}.`);
      setEmail('');

      // Call callback after a short delay
      setTimeout(() => {
        onInviteSent();
      }, 2000);

    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleInvite} className="space-y-4">
      {error && <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-800">{error}</div>}
      {success && <div className="p-3 bg-green-50 border border-green-200 rounded-lg text-green-800">{success}</div>}
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Email address</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="collaborator@example.com"
          className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Role</label>
        <select
          value={role}
          onChange={(e) => setRole(e.target.value as 'editor' | 'viewer')}
          className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
        >
          <option value="viewer">Viewer - Can view content</option>
          <option value="editor">Editor - Can edit content</option>
        </select>
      </div>

      <div className="flex justify-end pt-4">
        <button
          type="submit"
          disabled={isLoading}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors"
        >
          {isLoading ? 'Sending Invite...' : 'Send Invite'}
        </button>
      </div>
    </form>
  );
};

// Tab Summary Component
const TabSummary: React.FC<{
  tab: ITab;
  summary?: ISummary;
  onGenerateSummary: (tabId: string, content: string) => Promise<void>;
  onUpdateSummary: (summaryId: string, updates: Partial<ISummary>) => Promise<void>;
}> = ({ tab, summary, onGenerateSummary, onUpdateSummary }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [showFullSummary, setShowFullSummary] = useState(false);

  const handleGenerateSummary = async () => {
    if (!tab.content) return;
    
    setIsGenerating(true);
    try {
      await onGenerateSummary(tab.id, tab.content);
    } catch (error) {
      console.error('Failed to generate summary:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const displaySummary = summary?.summary || 'No summary available.';
  const shouldTruncate = displaySummary.length > 150 && !showFullSummary;
  const displayText = shouldTruncate ? displaySummary.substring(0, 150) + '...' : displaySummary;

  return (
    <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
      <div className="flex items-center justify-between mb-2">
        <h4 className="font-medium text-gray-900 text-sm flex items-center">
          <FiFileText className="w-4 h-4 mr-2 text-blue-600" />
          AI Summary
        </h4>
        {!summary && (
          <button
            onClick={handleGenerateSummary}
            disabled={isGenerating || !tab.content}
            className="text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700 disabled:bg-gray-400 transition-colors flex items-center"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-3 w-3 border-b-1 border-white mr-1"></div>
                Generating...
              </>
            ) : (
              'Generate Summary'
            )}
          </button>
        )}
      </div>
      
      {summary ? (
        <div>
          <p className="text-sm text-gray-700 whitespace-pre-wrap">
            {displayText}
          </p>
          {displaySummary.length > 150 && (
            <button
              onClick={() => setShowFullSummary(!showFullSummary)}
              className="text-xs text-blue-600 hover:text-blue-800 mt-1"
            >
              {showFullSummary ? 'Show less' : 'Show more'}
            </button>
          )}
          <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
            <span>Generated {new Date(summary.created_at).toLocaleDateString()}</span>
            {summary.translator && (
              <span className="text-green-600">Translated</span>
            )}
          </div>
        </div>
      ) : (
        <p className="text-sm text-gray-500">
          {tab.content ? 'Click "Generate Summary" to create an AI summary of this tab.' : 'No content available for summary.'}
        </p>
      )}
    </div>
  );
};

// Main Session Page Component
export default function AdvancedSessionPage() {
  const params = useParams();
  const router = useRouter();
  const sessionId = params.id as string;
  const supabase = createClient();
  
  // State declarations
  const [session, setSession] = useState<IResearchSession | null>(null);
  const [tabs, setTabs] = useState<ITab[]>([]);
  const [drafts, setDrafts] = useState<IDraft[]>([]);
  const [summaries, setSummaries] = useState<ISummary[]>([]);
  const [currentDraft, setCurrentDraft] = useState('');
  const [draftVersion, setDraftVersion] = useState(1);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'content' | 'ai' | 'drafts' | 'chat' | 'collaborate'>('content');
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [chatMessages, setChatMessages] = useState<ISessionMessage[]>([]);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [modal, setModal] = useState<{ type: string; data?: any }>({ type: '' });
  const [userProfile, setUserProfile] = useState<IProfile | null>(null);
  const [sessionPermissions, setSessionPermissions] = useState<'owner' | 'editor' | 'viewer'>('viewer');
  const [showTabModal, setShowTabModal] = useState(false);
  const [editingTab, setEditingTab] = useState<ITab | null>(null);
  const [collaborators, setCollaborators] = useState<ISessionCollaborator[]>([]);
  const [showFullEditor, setShowFullEditor] = useState(false);
  const [aiGeneratedDrafts, setAiGeneratedDrafts] = useState<string[]>([]);
  const [isAIGenerating, setIsAIGenerating] = useState(false);
  const [showPDFModal, setShowPDFModal] = useState(false);
  const [pdfTemplate, setPdfTemplate] = useState('simple');

  // Enhanced Hooks
  const { 
    onlineUsers, 
    isCollaborativeEditing, 
    setIsCollaborativeEditing,
    cursorPositions,
    editingStates 
  } = useCollaboration(sessionId, userProfile?.id || '');

  const { 
    aiStatus,
    generateSummary, 
    translateContent, 
    rewriteContent, 
    expandContent,
    autoGenerateDraft, 
    chatWithAI,
    analyzeURLContent
  } = useAIService();

  // Enhanced AI Analysis for URLs
  const analyzeURLWithAI = async (url: string) => {
    try {
      // First try to fetch the content
      const response = await fetch('/api/proxy?url=' + encodeURIComponent(url));
      if (!response.ok) {
        throw new Error('Failed to fetch URL content');
      }
      
      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Extract title and content
      const title = doc.querySelector('title')?.textContent || 'Untitled';
      const content = doc.body.textContent?.substring(0, 2000) || 'No content available';
      
      // Use AI to analyze and summarize
      const aiAnalysis = await analyzeURLContent(url);
      
      return {
        title: title,
        content: aiAnalysis || content
      };
    } catch (error) {
      console.error('URL analysis failed:', error);
      // Fallback to direct AI analysis
      try {
        const aiAnalysis = await analyzeURLContent(url);
        return {
          title: 'AI Analyzed Content',
          content: aiAnalysis
        };
      } catch (aiError) {
        console.error('AI analysis also failed:', aiError);
        throw new Error('Failed to analyze URL content');
      }
    }
  };

  // Enhanced CRUD Operations with AI Integration
  const createTab = async (tabData: Partial<ITab>) => {
    try {
      const { data, error } = await supabase
        .from('tabs')
        .insert([{
          session_id: sessionId,
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
          user_id: userProfile?.id,
        }])
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => [data, ...prev]);
      setModal({ type: 'success', data: { message: 'Tab created successfully!' } });
      
      // Auto-generate AI summary if content is available
      if (data.content && data.content.length > 50) {
        try {
          const summaryText = await generateSummary(data.content, 'tab');
          await createSummary(data.id, summaryText);
        } catch (summaryError) {
          console.warn('Failed to auto-generate summary:', summaryError);
        }
      }
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message || 'Failed to create tab.' } });
    }
  };

  const updateTab = async (tabData: Partial<ITab>) => {
    try {
      const { data, error } = await supabase
        .from('tabs')
        .update({
          url: tabData.url,
          title: tabData.title,
          content: tabData.content,
        })
        .eq('id', tabData.id)
        .select()
        .single();

      if (error) throw error;
      
      setTabs(prev => prev.map(tab => tab.id === tabData.id ? data : tab));
      setModal({ type: 'success', data: { message: 'Tab updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message || 'Failed to update tab.' } });
    }
  };

  const deleteTab = async (tabId: string) => {
    if (!confirm('Are you sure you want to delete this tab?')) return;
    
    try {
      const { error } = await supabase
        .from('tabs')
        .delete()
        .eq('id', tabId);

      if (error) throw error;
      
      setTabs(prev => prev.filter(tab => tab.id !== tabId));
      // Also remove associated summaries
      setSummaries(prev => prev.filter(summary => summary.tab_id !== tabId));
      setModal({ type: 'success', data: { message: 'Tab deleted successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message || 'Failed to delete tab.' } });
    }
  };

  const createSummary = async (tabId: string, summaryText: string) => {
    try {
      const { data, error } = await supabase
        .from('summaries')
        .insert([{
          tab_id: tabId,
          summary: summaryText,
          created_at: new Date().toISOString()
        }])
        .select()
        .single();

      if (error) throw error;
      
      setSummaries(prev => [data, ...prev]);
      return data;
    } catch (error) {
      console.error('Error creating summary:', error);
      throw error;
    }
  };

  const updateSummary = async (summaryId: string, updates: Partial<ISummary>) => {
    try {
      const { data, error } = await supabase
        .from('summaries')
        .update(updates)
        .eq('id', summaryId)
        .select()
        .single();

      if (error) throw error;
      
      setSummaries(prev => prev.map(summary => 
        summary.id === summaryId ? data : summary
      ));
      return data;
    } catch (error) {
      console.error('Error updating summary:', error);
      throw error;
    }
  };

  const generateTabSummary = async (tabId: string, content: string) => {
    try {
      const summaryText = await generateSummary(content, 'tab');
      await createSummary(tabId, summaryText);
    } catch (error) {
      console.error('Error generating tab summary:', error);
      throw error;
    }
  };

  const saveDraft = async () => {
    if (!sessionId || !currentDraft.trim()) {
      setModal({ type: 'error', data: { message: 'Cannot save empty draft.' } });
      return;
    }

    try {
      const { data, error } = await supabase
        .from('drafts')
        .insert([{
          research_session_id: sessionId,
          content: currentDraft,
          version: draftVersion,
          user_id: userProfile?.id,
          created_at: new Date().toISOString()
        }])
        .select()
        .single();

      if (error) throw error;
      
      setDrafts(prev => [data, ...prev]);
      setDraftVersion(prev => prev + 1);
      setModal({ type: 'success', data: { message: 'Draft saved successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message || 'Failed to save draft.' } });
    }
  };

  const updateSessionTitle = async () => {
    if (!sessionId || !editedTitle.trim()) return;

    try {
      const { data, error } = await supabase
        .from('research_sessions')
        .update({ title: editedTitle })
        .eq('id', sessionId)
        .select()
        .single();

      if (error) throw error;
      
      setSession(data);
      setIsEditingTitle(false);
      setModal({ type: 'success', data: { message: 'Title updated successfully!' } });
    } catch (error: any) {
      setModal({ type: 'error', data: { message: error.message || 'Failed to update title.' } });
    }
  };

  const sendChatMessage = async (content: string) => {
    if (!userProfile) return;

    const tempId = crypto.randomUUID();
    const userMessage: ISessionMessage = {
      id: tempId,
      session_id: sessionId,
      user_id: userProfile.id,
      content,
      sender: 'user',
      created_at: new Date().toISOString(),
    };

    setChatMessages(prev => [...prev, userMessage]);
    setIsChatLoading(true);

    try {
      // Save user message to database
      const { data: userMsg, error: userErr } = await supabase
        .from('session_messages')
        .insert(userMessage)
        .select()
        .single();
      
      if (userErr) throw userErr;

      setChatMessages(prev => prev.map(m => m.id === tempId ? userMsg : m));

      // Get AI response
      const aiResponse = await chatWithAI(content, { tabs, drafts });

      const aiMessage: Omit<ISessionMessage, 'id' | 'created_at'> = {
        session_id: sessionId,
        content: aiResponse,
        sender: 'ai',
      };

      const { data: aiMsg, error: aiErr } = await supabase
        .from('session_messages')
        .insert(aiMessage)
        .select()
        .single();
      
      if (aiErr) throw aiErr;

      setChatMessages(prev => [...prev, aiMsg]);

    } catch (error) {
      console.error('Error getting AI response:', error);
      // Add error message to chat
      const errorMessage: ISessionMessage = {
        id: crypto.randomUUID(),
        session_id: sessionId,
        content: "Sorry, I encountered an error. Please try again.",
        sender: 'ai',
        created_at: new Date().toISOString(),
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsChatLoading(false);
    }
  };

  const shareSession = () => {
    const url = window.location.href;
    navigator.clipboard.writeText(url).then(() => {
      setModal({ type: 'success', data: { message: 'Session link copied to clipboard!' } });
    }, () => {
      setModal({ type: 'error', data: { message: 'Failed to copy session link.' } });
    });
  };

  const handleAIAction = async (action: string, content: string) => {
    try {
      switch (action) {
        case 'summarize':
          return await generateSummary(content, 'draft');
        case 'translate':
          return await translateContent(content, 'English');
        case 'rewrite':
          return await rewriteContent(content, 'academic');
        case 'expand':
          return await expandContent(content, 'detailed analysis');
        case 'simplify':
          return await rewriteContent(content, 'simple');
        case 'formalize':
          return await rewriteContent(content, 'formal');
        default:
          return content;
      }
    } catch (error) {
      console.error('AI Action failed:', error);
      return 'AI action failed. Please try again.';
    }
  };

  const handleExport = async (template: string) => {
    if (!session) return;

    setShowPDFModal(false);

    let tabsToExport: any[] = [];
    if (template === 'academic' || template === 'research') {
      tabsToExport = tabs;
    }

    const draftToExport = {
      content: currentDraft,
      version: draftVersion,
      research_sessions: {
        title: session?.title || 'Research'
      }
    };

    exportToPDF(template, draftToExport as any, tabsToExport);
  };

  const generateAIDraft = async () => {
    if (tabs.length === 0) {
      setModal({ type: 'error', data: { message: 'No research tabs available for AI draft generation.' } });
      return;
    }

    setIsAIGenerating(true);
    try {
      const aiDraft = await autoGenerateDraft(tabs, 'comprehensive research paper');
      setCurrentDraft(aiDraft);
      setAiGeneratedDrafts(prev => [...prev, aiDraft]);
      setModal({ type: 'success', data: { message: 'AI draft generated successfully!' } });
    } catch (error) {
      setModal({ type: 'error', data: { message: 'Failed to generate AI draft.' } });
    } finally {
      setIsAIGenerating(false);
    }
  };

  // Load session data
  const loadSessionData = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        router.push('/sign-in');
        return;
      }

      // Load user profile
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      setUserProfile(profile);

      // Load session
      const { data: sessionData, error: sessionError } = await supabase
        .from('research_sessions')
        .select('*')
        .eq('id', sessionId)
        .single();

      if (sessionError || !sessionData) {
        console.error('Session not found:', sessionError);
        router.push('/dashboard');
        return;
      }

      setSession(sessionData);
      setEditedTitle(sessionData.title);

      // Check permissions
      if (sessionData.user_id === user.id) {
        setSessionPermissions('owner');
      } else {
        const { data: collaborator } = await supabase
          .from('session_collaborators')
          .select('role')
          .eq('session_id', sessionId)
          .eq('user_id', user.id)
          .single();
        
        setSessionPermissions(collaborator?.role || 'viewer');
      }

      // Load all related data in parallel
      const [
        tabsResponse, 
        draftsResponse, 
        collaboratorsResponse, 
        messagesResponse,
        summariesResponse
      ] = await Promise.all([
        supabase.from('tabs').select('*').eq('session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('drafts').select('*').eq('research_session_id', sessionId).order('created_at', { ascending: false }),
        supabase.from('session_collaborators').select('*').eq('session_id', sessionId),
        supabase.from('session_messages').select('*').eq('session_id', sessionId).order('created_at', { ascending: true }),
        supabase.from('summaries').select('*')
      ]);

      if (tabsResponse.data) setTabs(tabsResponse.data);
      if (draftsResponse.data) {
        setDrafts(draftsResponse.data);
        // Set the latest draft as current
        if (draftsResponse.data.length > 0) {
          setCurrentDraft(draftsResponse.data[0].content);
          setDraftVersion(draftsResponse.data[0].version + 1);
        }
      }
      if (collaboratorsResponse.data) setCollaborators(collaboratorsResponse.data);
      if (messagesResponse.data) setChatMessages(messagesResponse.data);
      if (summariesResponse.data) setSummaries(summariesResponse.data);

    } catch (error) {
      console.error('Error loading session:', error);
      setModal({ type: 'error', data: { message: 'Failed to load session data.' } });
    } finally {
      setLoading(false);
    }
  };

  // Initial load
  useEffect(() => {
    if (sessionId) {
      loadSessionData();
    }
  }, [sessionId]);

  if (loading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading advanced research session...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!session) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Session not found</h1>
            <button 
              onClick={() => router.push('/dashboard')} 
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Back to Dashboard
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      {/* Full Screen Editor */}
      <FullScreenEditor
        isOpen={showFullEditor}
        onClose={() => setShowFullEditor(false)}
        value={currentDraft}
        onChange={setCurrentDraft}
        onSave={saveDraft}
        onAIAction={handleAIAction}
        title={`Advanced Editor - ${session.title}`}
      />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-8">
          <div className="flex-1">
            <button 
              onClick={() => router.push('/dashboard')} 
              className="text-gray-600 hover:text-black mb-4 flex items-center transition-colors"
            >
              ← Back to Dashboard
            </button>
            
            <div className="flex items-center gap-3 mb-2">
              {isEditingTitle ? (
                <div className="flex items-center gap-2">
                  <input
                    type="text"
                    value={editedTitle}
                    onChange={(e) => setEditedTitle(e.target.value)}
                    className="text-3xl font-bold text-gray-900 bg-transparent border-b-2 border-blue-500 focus:outline-none"
                    autoFocus
                    onKeyPress={(e) => e.key === 'Enter' && updateSessionTitle()}
                    onBlur={updateSessionTitle}
                  />
                  <button onClick={updateSessionTitle} className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors">
                    <FiCheck className="w-5 h-5" />
                  </button>
                  <button onClick={() => setIsEditingTitle(false)} className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                    <FiX className="w-5 h-5" />
                  </button>
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <h1 className="text-3xl font-bold text-gray-900">{session.title}</h1>
                  {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                    <button 
                      onClick={() => setIsEditingTitle(true)} 
                      className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <FiEdit3 className="w-5 h-5" />
                    </button>
                  )}
                </div>
              )}
            </div>
            
            <div className="flex flex-wrap items-center gap-4 text-gray-600">
              <span className="flex items-center">
                <FiClock className="w-4 h-4 mr-1" />
                Created {new Date(session.created_at).toLocaleDateString()}
              </span>
              <span>•</span>
              <span className="flex items-center">
                <FiBook className="w-4 h-4 mr-1" />
                {tabs.length} research tabs
              </span>
              <span>•</span>
              <span className="flex items-center">
                <FiEdit2 className="w-4 h-4 mr-1" />
                {drafts.length} drafts
              </span>
              <span>•</span>
              <span className="flex items-center">
                <FiUsers className="w-4 h-4 mr-1" />
                {collaborators.length + 1} collaborators
              </span>
              <span>•</span>
              <span className={`flex items-center ${
                aiStatus === 'ready' ? 'text-green-600' : 
                aiStatus === 'loading' ? 'text-yellow-600' : 
                'text-red-600'
              }`}>
                <FiCpu className="w-4 h-4 mr-1" />
                AI: {aiStatus}
              </span>
            </div>
          </div>
          
          <div className="flex flex-wrap items-center gap-3">
            <button 
              onClick={() => setIsCollaborativeEditing(!isCollaborativeEditing)}
              className={`px-4 py-2 rounded-lg transition-colors flex items-center ${
                isCollaborativeEditing 
                  ? 'bg-green-100 text-green-800 border border-green-300' 
                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
              }`}
            >
              {isCollaborativeEditing ? <FiGitBranch className="w-5 h-5 mr-2" /> : <FiGitPullRequest className="w-5 h-5 mr-2" />}
              {isCollaborativeEditing ? 'Collaborating' : 'Collaborate'}
            </button>
            
            <button 
              onClick={() => setModal({ type: 'invite-collaborator' })}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center transition-colors"
            >
              <FiUser className="w-5 h-5 mr-2" />
              Invite
            </button>

            <button 
              onClick={() => setShowFullEditor(true)}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center transition-colors"
            >
              <FiMaximize className="w-5 h-5 mr-2" />
              Full Editor
            </button>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex border-b border-gray-200 mb-8 overflow-x-auto">
          {[
            { id: 'content', label: 'Research Content', icon: FiBook },
            { id: 'drafts', label: 'Drafts', icon: FiEdit2 },
            { id: 'chat', label: 'AI Chat', icon: FiMessageSquare },
            { id: 'collaborate', label: `Collaborate ${onlineUsers.length > 0 ? `(${onlineUsers.length})` : ''}`, icon: FiUsers }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveTab(id as any)}
              className={`flex items-center space-x-2 px-6 py-3 border-b-2 font-medium whitespace-nowrap transition-colors ${
                activeTab === id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <Icon className="w-4 h-4" />
              <span>{label}</span>
            </button>
          ))}
        </div>

        {/* Content Tab */}
        {activeTab === 'content' && (
          <div className="space-y-8">
            {/* AI Quick Actions */}
            <div className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-xl p-6">
              <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
                <div>
                  <h3 className="text-lg font-semibold text-purple-900 mb-2">AI Research Assistant</h3>
                  <p className="text-purple-700">Let AI help you analyze and organize your research</p>
                </div>
                <div className="flex flex-wrap gap-3">
                  <button 
                    onClick={generateAIDraft}
                    disabled={tabs.length === 0 || isAIGenerating}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 flex items-center transition-colors"
                  >
                    <FiFileText className="w-4 h-4 mr-2" />
                    {isAIGenerating ? 'Generating...' : 'Generate Draft'}
                  </button>
                  <button 
                    onClick={() => {
                      setEditingTab(null);
                      setShowTabModal(true);
                    }}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center transition-colors"
                  >
                    <FiPlus className="w-4 h-4 mr-2" />
                    Add Tab with AI
                  </button>
                </div>
              </div>
            </div>

            {/* Tabs Section */}
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm">
              <div className="p-6 border-b border-gray-200">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                  <h2 className="text-xl font-semibold text-gray-900">Research Tabs</h2>
                  <div className="flex items-center gap-3">
                    <span className="text-sm text-gray-600">{tabs.length} tabs collected</span>
                    {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                      <button 
                        onClick={() => {
                          setEditingTab(null);
                          setShowTabModal(true);
                        }}
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center transition-colors"
                      >
                        <FiPlus className="w-4 h-4 mr-2" />
                        Add Tab
                      </button>
                    )}
                  </div>
                </div>
              </div>

              <div className="p-6">
                {tabs.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {tabs.map((tab) => {
                      const tabSummary = summaries.find(s => s.tab_id === tab.id);
                      return (
                        <div key={tab.id} className="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors group">
                          <div className="flex items-start justify-between mb-3">
                            <div className="flex items-center space-x-2 min-w-0 flex-1">
                              <h3 className="font-semibold text-gray-900 truncate">{tab.title || 'Untitled'}</h3>
                            </div>
                            <div className="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0">
                              <a 
                                href={tab.url} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                                title="Open in new tab"
                              >
                                <FiExternalLink className="w-4 h-4" />
                              </a>
                              {(sessionPermissions === 'owner' || sessionPermissions === 'editor') && (
                                <>
                                  <button 
                                    onClick={() => {
                                      setEditingTab(tab);
                                      setShowTabModal(true);
                                    }}
                                    className="p-1 text-gray-400 hover:text-green-600 transition-colors"
                                    title="Edit tab"
                                  >
                                    <FiEdit2 className="w-4 h-4" />
                                  </button>
                                  <button 
                                    onClick={() => deleteTab(tab.id)} 
                                    className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                                    title="Delete tab"
                                  >
                                    <FiTrash2 className="w-4 h-4" />
                                  </button>
                                </>
                              )}
                            </div>
                          </div>
                          
                          <p className="text-sm text-gray-600 truncate mb-2">{tab.url}</p>
                          
                          {tab.content && (
                            <div className="mb-3">
                              <p className="text-sm text-gray-700 line-clamp-3">{tab.content}</p>
                            </div>
                          )}
                          
                          {/* Tab Summary */}
                          <TabSummary
                            tab={tab}
                            summary={tabSummary}
                            onGenerateSummary={generateTabSummary}
                            onUpdateSummary={updateSummary}
                          />
                          
                          <div className="flex items-center justify-between text-xs text-gray-500 mt-2">
                            <span>Added {new Date(tab.created_at).toLocaleDateString()}</span>
                            {tabSummary && (
                              <span className="text-green-600 flex items-center">
                                <FiCheck className="w-3 h-3 mr-1" />
                                AI Summarized
                              </span>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <FiBook className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No research tabs yet</h3>
                    <p className="text-gray-600 mb-6">Start by adding research sources to your session.</p>
                    <button 
                      onClick={() => {
                        setEditingTab(null);
                        setShowTabModal(true);
                      }}
                      className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Add Your First Tab with AI
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Drafts Tab */}
        {activeTab === 'drafts' && (
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            <div className="space-y-4">
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <h2 className="text-xl font-semibold text-gray-900">Research Draft</h2>
                <div className="flex items-center space-x-2">
                  <button 
                    onClick={generateAIDraft}
                    disabled={tabs.length === 0 || isAIGenerating}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 flex items-center transition-colors"
                  >
                    <FiZap className="w-4 h-4 mr-2" />
                    {isAIGenerating ? 'Generating...' : 'AI Generate'}
                  </button>
                  <button 
                    onClick={saveDraft}
                    disabled={sessionPermissions === 'viewer' || !currentDraft.trim()}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 flex items-center transition-colors"
                  >
                    <FiSave className="w-4 h-4 mr-2" />
                    Save Draft
                  </button>
                  <button 
                    onClick={() => setShowFullEditor(true)}
                    className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center transition-colors"
                  >
                    <FiMaximize className="w-4 h-4 mr-2" />
                    Fullscreen
                  </button>
                </div>
              </div>
              
              <AdvancedEditor
                value={currentDraft}
                onChange={setCurrentDraft}
                placeholder="Start writing your research findings... Use AI tools to enhance your writing."
                disabled={sessionPermissions === 'viewer'}
                onlineUsers={onlineUsers}
                currentUser={userProfile}
                onAIAction={handleAIAction}
              />
              
              {sessionPermissions === 'viewer' && (
                <p className="text-sm text-gray-500 mt-2 flex items-center">
                  <FiEye className="w-4 h-4 mr-1" />
                  Viewer permissions: You cannot edit this draft.
                </p>
              )}
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Draft Versions & AI Suggestions</h3>
              
              {/* AI Generated Drafts */}
              {aiGeneratedDrafts.length > 0 && (
                <div className="mb-6">
                  <h4 className="font-medium text-gray-900 mb-3 flex items-center">
                    <FiZap className="w-4 h-4 mr-2 text-purple-600" />
                    AI Generated Drafts
                  </h4>
                  <div className="space-y-2">
                    {aiGeneratedDrafts.map((draft, index) => (
                      <div 
                        key={index}
                        className="border border-purple-200 bg-purple-50 rounded-lg p-3 cursor-pointer hover:bg-purple-100 transition-colors"
                        onClick={() => setCurrentDraft(draft)}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-purple-900">AI Draft {index + 1}</span>
                          <span className="text-xs bg-purple-200 text-purple-800 px-2 py-1 rounded">AI</span>
                        </div>
                        <p className="text-sm text-purple-700 line-clamp-2">
                          {draft.substring(0, 100)}...
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Saved Drafts */}
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {drafts.map((draft) => (
                  <div 
                    key={draft.id} 
                    className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                    onClick={() => {
                      setCurrentDraft(draft.content);
                      setDraftVersion(draft.version + 1);
                    }}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium text-gray-900">Version {draft.version}</span>
                      <span className="text-xs text-gray-500">
                        {new Date(draft.created_at).toLocaleDateString()}
                      </span>
                    </div>
                    <div 
                      className="text-sm text-gray-600 line-clamp-3 prose prose-sm"
                      dangerouslySetInnerHTML={{ __html: draft.content.substring(0, 200) + '...' }}
                    />
                    <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
                      <span>By {draft.user_id === userProfile?.id ? 'You' : 'Collaborator'}</span>
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          setCurrentDraft(draft.content);
                          setDraftVersion(draft.version + 1);
                        }}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        Restore
                      </button>
                    </div>
                  </div>
                ))}
                {drafts.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <FiEdit2 className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                    <p>No saved drafts yet. Start writing to save your first draft.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* AI Chat Tab */}
        {activeTab === 'chat' && (
          <div className="bg-white border border-gray-200 rounded-xl h-[600px] flex flex-col">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">AI Research Assistant</h2>
                  <p className="text-sm text-gray-600">Ask questions about your research content</p>
                </div>
                <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                  aiStatus === 'ready' ? 'bg-green-100 text-green-800' : 
                  aiStatus === 'loading' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {aiStatus === 'ready' ? 'AI Ready' : 
                   aiStatus === 'loading' ? 'AI Loading...' :
                   'AI Unavailable'}
                </div>
              </div>
            </div>
            
            <AIChat
              messages={chatMessages}
              onSendMessage={sendChatMessage}
              isLoading={isChatLoading}
              researchContext={{ tabs, drafts }}
            />
          </div>
        )}

        {/* Collaborate Tab */}
        {activeTab === 'collaborate' && (
          <div className="bg-white border border-gray-200 rounded-xl p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FiUsers className="w-6 h-6 text-blue-600" />
                <h2 className="text-xl font-semibold text-gray-900">Collaboration Hub</h2>
              </div>
              <div className="flex items-center space-x-2">
                <div className={`w-3 h-3 rounded-full ${isCollaborativeEditing ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                <span className="text-sm text-gray-600">
                  {isCollaborativeEditing ? 'Live Collaboration Active' : 'Collaboration Paused'}
                </span>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Online Collaborators */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-4">Team Members</h3>
                <div className="space-y-3">
                  {/* Current User */}
                  <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg bg-blue-50">
                    <div className="flex items-center space-x-3">
                      <div className="w-3 h-3 rounded-full bg-green-500"></div>
                      <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                        {userProfile?.full_name?.[0]?.toUpperCase() || 'U'}
                      </div>
                      <div>
                        <div className="font-medium">{userProfile?.full_name || 'You'}</div>
                        <div className="text-sm text-gray-600">{userProfile?.email}</div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">You</span>
                      <span className="text-sm text-green-600">Online</span>
                    </div>
                  </div>
                  
                  {/* Other Online Users */}
                  {onlineUsers.map((user) => (
                    <div key={user.user_id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className="w-3 h-3 rounded-full bg-green-500"></div>
                        <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                          {user.name?.[0]?.toUpperCase() || 'U'}
                        </div>
                        <div>
                          <div className="font-medium">{user.name}</div>
                          <div className="text-sm text-gray-600">Collaborator</div>
                        </div>
                      </div>
                      <span className="text-sm text-green-600">Online</span>
                    </div>
                  ))}
                  
                  {onlineUsers.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <FiUsers className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                      <p>No other collaborators online</p>
                      <p className="text-sm mt-2">Invite team members to collaborate in real-time</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Collaboration Tools */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-4">Collaboration Tools</h3>
                <div className="space-y-4">
                  <div className={`p-4 border rounded-lg transition-colors ${
                    isCollaborativeEditing
                      ? 'border-green-300 bg-green-50'
                      : 'border-gray-200 hover:bg-gray-50'
                  }`}>
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-medium">Live Collaborative Editing</h4>
                      <button
                        onClick={() => setIsCollaborativeEditing(!isCollaborativeEditing)}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                          isCollaborativeEditing ? 'bg-green-600' : 'bg-gray-200'
                        }`}
                      >
                        <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          isCollaborativeEditing ? 'translate-x-6' : 'translate-x-1'
                        }`} />
                      </button>
                    </div>
                    <p className="text-sm text-gray-600">
                      {isCollaborativeEditing 
                        ? 'Enabled - Team members can see your cursor and edits in real-time'
                        : 'Enable to allow real-time collaboration with team members'
                      }
                    </p>
                  </div>

                  <button 
                    onClick={() => setModal({ type: 'invite-collaborator' })}
                    className="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <FiUser className="w-5 h-5 text-blue-600" />
                      <div>
                        <h4 className="font-medium">Invite Collaborators</h4>
                        <p className="text-sm text-gray-600">Add team members or external collaborators</p>
                      </div>
                    </div>
                  </button>

                  <button 
                    onClick={shareSession}
                    className="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div className="flex items-center space-x-3">
                      <FiShare2 className="w-5 h-5 text-green-600" />
                      <div>
                        <h4 className="font-medium">Share Session</h4>
                        <p className="text-sm text-gray-600">Generate shareable link for this session</p>
                      </div>
                    </div>
                  </button>

                  <button 
                    onClick={() => setShowPDFModal(true)}
                    className="w-full text-left p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div className="flex items-center space-x-3">
                      <FiDownload className="w-5 h-5 text-purple-600" />
                      <div>
                        <h4 className="font-medium">Export Research</h4>
                        <p className="text-sm text-gray-600">Export as PDF, Word, or Markdown</p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Loading Modal */}
      <Modal
        isOpen={isAIGenerating}
        onClose={() => {}}
        title="AI is thinking..."
      >
        <div className="flex items-center justify-center space-x-3 p-6">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p className="text-gray-700">Please wait while the AI is generating content.</p>
        </div>
      </Modal>

      {/* AI-Powered Tab Modal */}
      <AITabModal
        isOpen={showTabModal}
        onClose={() => {
          setShowTabModal(false);
          setEditingTab(null);
        }}
        onSave={editingTab ? updateTab : createTab}
        editingTab={editingTab}
        onAIAnalyze={analyzeURLWithAI}
      />

      {/* Invite Collaborator Modal */}
      <Modal
        isOpen={modal.type === 'invite-collaborator'}
        onClose={() => setModal({ type: '' })}
        title="Invite Collaborators"
        size="md"
      >
        <InviteCollaboratorForm 
          sessionId={sessionId} 
          onInviteSent={() => setModal({ type: '' })} 
          editedTitle={editedTitle}
          session={session}
        />
      </Modal>

      {/* Success/Error Modals */}
      <Modal
        isOpen={modal.type === 'success'}
        onClose={() => setModal({ type: '' })}
        title="Success"
      >
        <div className="flex items-center space-x-3">
          <FiCheck className="w-6 h-6 text-green-600" />
          <p className="text-gray-700">{modal.data?.message}</p>
        </div>
      </Modal>

      <Modal
        isOpen={modal.type === 'error'}
        onClose={() => setModal({ type: '' })}
        title="Error"
      >
        <div className="flex items-center space-x-3">
          <FiAlertCircle className="w-6 h-6 text-red-600" />
          <p className="text-gray-700">{modal.data?.message}</p>
        </div>
      </Modal>

      {/* PDF Export Modal */}
      {showPDFModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold">Choose PDF Template</h3>
              <button onClick={() => setShowPDFModal(false)} className="p-1 rounded-full hover:bg-gray-200">
                <FiX />
              </button>
            </div>
            <div className="space-y-4">
              <div
                onClick={() => setPdfTemplate('simple')}
                className={`p-4 border rounded-lg cursor-pointer ${pdfTemplate === 'simple' ? 'border-blue-500' : 'border-gray-300'}`}
              >
                <h4 className="font-semibold">Simple</h4>
                <p className="text-sm text-gray-600">A clean and simple layout.</p>
              </div>
              <div
                onClick={() => setPdfTemplate('academic')}
                className={`p-4 border rounded-lg cursor-pointer ${pdfTemplate === 'academic' ? 'border-blue-500' : 'border-gray-300'}`}
              >
                <h4 className="font-semibold">Academic</h4>
                <p className="text-sm text-gray-600">A template for academic papers.</p>
              </div>
              <div
                onClick={() => setPdfTemplate('research')}
                className={`p-4 border rounded-lg cursor-pointer ${pdfTemplate === 'research' ? 'border-blue-500' : 'border-gray-300'}`}
              >
                <h4 className="font-semibold">Research Paper</h4>
                <p className="text-sm text-gray-600">A template for research papers with sources.</p>
              </div>
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => handleExport(pdfTemplate)}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Export
              </button>
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
}