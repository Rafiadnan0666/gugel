'use client';

import { useState, useEffect } from 'react';
import type { ITab, IDraft } from '@/types/main.db';

// Advanced AI Service with Language Model Integration
export const useAIService = () => {
  const [aiSession, setAiSession] = useState<any>(null);
  const [aiStatus, setAiStatus] = useState<'loading' | 'ready' | 'error' | 'unavailable'>('loading');
  const [useServerAI, setUseServerAI] = useState(false);

  useEffect(() => {
    const initializeAI = async () => {
      try {
        if (!(window as any).LanguageModel) {
          console.log("LanguageModel API not found, falling back to server-side AI.");
          setUseServerAI(true);
          setAiStatus('ready');
          return;
        }

        const opts = {
          expectedOutputs: [{ type: "text", languages: ["en"] }]
        };

        const availability = await (window as any).LanguageModel.availability(opts);
        console.log("availability:", availability);

        if (availability === "unavailable") {
          console.error("❌ Model masih unavailable.");
          setAiStatus('unavailable');
          return;
        }

        const session = await (window as any).LanguageModel.create({
          ...opts,
          monitor(m: any) {
            m.addEventListener("downloadprogress", (e: any) => {
              console.log(`📥 Download progress: ${(e.loaded * 100).toFixed(1)}%`);
            });
            m.addEventListener("statechange", (e: any) => {
              console.log("⚡ State change:", e.target.state);
            });
          }
        });

        console.log("✅ Session ready:", session);
        setAiSession(session);
        setAiStatus('ready');

      } catch (err) {
        console.error("Error:", err);
        setAiStatus('error');
      }
    };

    initializeAI();
  }, []);

  const promptAI = async (prompt: string, type: string = 'summarize') => {
    if (useServerAI) {
      try {
        const response = await fetch('/api/ai/prompt', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt, type }),
        });
        if (!response.ok) {
          throw new Error('Server AI response was not ok.');
        }
        const data = await response.json();
        return data.response;
      } catch (error) {
        console.error("Error prompting server-side AI:", error);
        return "Error from server-side AI";
      }
    } else {
      if (!aiSession) {
        console.error("AI session not ready");
        return "AI not available";
      }
      try {
        const result = await aiSession.prompt(prompt);
        return result;
      } catch (error) {
        console.error("Error prompting AI:", error);
        return "Error from AI";
      }
    }
  };

  const generateSummary = async (content: string, type: 'tab' | 'draft') => {
    const prompt = `You are a world-class researcher. Please provide a concise summary of the following ${type} content. The summary should be easy to understand for a general audience and should highlight the key findings and conclusions.\n\nContent:\n\"\"\"\n${content.substring(0, 4000)}\n\"\"\"`;
    return await promptAI(prompt, 'summarize');
  };

  const translateContent = async (content: string, targetLanguage: string) => {
    const prompt = `You are a professional translator. Please translate the following content to ${targetLanguage}. The translation should be accurate and natural-sounding.\n\nContent:\n\"\"\"\n${content.substring(0, 4000)}\n\"\"\"`;
    return await promptAI(prompt, 'translate');
  };

  const rewriteContent = async (content: string, style: string = 'academic') => {
    const prompt = `You are a professional writer. Please rewrite the following content in a ${style} style. The rewritten content should be clear, concise, and engaging.\n\nContent:\n\"\"\"\n${content.substring(0, 4000)}\n\"\"\"`;
    return await promptAI(prompt, 'rewrite');
  };

  const expandContent = async (content: string, context: string) => {
    const prompt = `You are a professional writer. Please expand the following content with more details and examples. The expanded content should be well-structured and easy to read. The context for expansion is: ${context}\n\nContent:\n\"\"\"\n${content.substring(0, 4000)}\n\"\"\"`;
    return await promptAI(prompt, 'expand');
  };

  const autoGenerateDraft = async (tabs: ITab[], theme: string) => {
    const tabContents = tabs.map(tab => 
      `Source: ${tab.title}\nURL: ${tab.url}\nContent: ${tab.content?.substring(0, 1000)}`
    ).join('\n\n---\n\n');
    
    const prompt = `You are a world-class researcher. Please generate a research draft on the theme of "${theme}". The draft should be well-structured, with a clear introduction, body, and conclusion. It should synthesize the information from the provided sources and include citations. Please use the following sources to generate the draft:\n\nSources:\n\"\"\"\n${tabContents}\n\"\"\"`;
    return await promptAI(prompt, 'draft');
  };

  const chatWithAI = async (message: string, context: { tabs: ITab[], drafts: IDraft[] }) => {
    const contextSummary = `You are a helpful AI assistant for a researcher. The researcher is working on a project with the following context:\n- ${context.tabs.length} research tabs collected\n- ${context.drafts.length} drafts written\n\nPlease provide a helpful and informative response to the researcher's question.`;
    const prompt = `${contextSummary}\n\nResearcher's Question: ${message}`;
    return await promptAI(prompt, 'chat');
  };

  return {
    aiStatus,
    generateSummary,
    translateContent,
    rewriteContent,
    expandContent,
    autoGenerateDraft,
    chatWithAI,
    promptAI,
  };
};
